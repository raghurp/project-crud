[{"H:\\Ragu Htc\\project crud\\src\\index.js":"1","H:\\Ragu Htc\\project crud\\src\\reportWebVitals.js":"2","H:\\Ragu Htc\\project crud\\src\\App.js":"3","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\User.js":"4","H:\\Ragu Htc\\project crud\\src\\components\\MyProfile\\MyProfile.js":"5","H:\\Ragu Htc\\project crud\\src\\components\\ForgotPassword\\Forgotpassword.js":"6","H:\\Ragu Htc\\project crud\\src\\components\\Login\\Login.js":"7","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSize.js":"8","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditSize.js":"9","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddSize.js":"10","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaCrust.js":"11","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditCrust.js":"12","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddCrust.js":"13","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\UploadPizza.js":"14","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditVegToppings.js":"15","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddVegToppings.js":"16","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\VegToppings.js":"17","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\NonVegToppings.js":"18","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddNonVegToppings.js":"19","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditNonVegToppings.js":"20","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\ViewCatalog.js":"21","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\utils.js":"22","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\TopNav.js":"23","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\Menu.js":"24","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\menu.js":"25","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\PizzaSides.js":"26","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\AddSides.js":"27","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\Beverage.js":"28","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\AddBeverage.js":"29","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\EditBeverage.js":"30","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\EditSide.js":"31","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\EditUpload.js":"32","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\Topbar.js":"33","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\Menu.js":"34","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\Menus.js":"35","H:\\Ragu Htc\\project crud\\src\\components\\Sign-Up\\SignUp.js":"36","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Manage-Pizza-Routing\\Manage-Pizza-Routing.js":"37","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\Bevarages-Roting\\Beverages-Routing.js":"38","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\Pizza-Sides-Routing\\Pizza-Sides-Routing.js":"39","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\Menu-Routing\\Menu-Routing.js":"40","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Employee-Routing\\Employee-Routing.js":"41","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\Upload-Pizza-Routing\\Upload-Pizza-Routing.js":"42","H:\\Ragu Htc\\project crud\\src\\components\\MyProfile\\My-Profile-Routing\\My-Profile-Routing.js":"43","H:\\Ragu Htc\\project crud\\src\\components\\ForgotPassword\\Password-Reset-Routing\\Password-Reset-Routing.js":"44","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Add-Employee.js":"45","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Edit-Employee.js":"46","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\View-Employee.js":"47","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\cart-control\\CartControl.js":"48","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\store\\reducer.js":"49","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\car-output\\CartOutput.js":"50","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\CreateCard.js":"51","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\GroupedButton.js":"52","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\SelectComponent\\SelectComponent.js":"53"},{"size":671,"mtime":1616044119418,"results":"54","hashOfConfig":"55"},{"size":362,"mtime":499162500000,"results":"56","hashOfConfig":"55"},{"size":2389,"mtime":1614183982642,"results":"57","hashOfConfig":"55"},{"size":2351,"mtime":1615807631744,"results":"58","hashOfConfig":"55"},{"size":3065,"mtime":1613726912293,"results":"59","hashOfConfig":"55"},{"size":5543,"mtime":1612180071705,"results":"60","hashOfConfig":"55"},{"size":5409,"mtime":1616474218340,"results":"61","hashOfConfig":"55"},{"size":10580,"mtime":1616176535671,"results":"62","hashOfConfig":"55"},{"size":8723,"mtime":1615802081089,"results":"63","hashOfConfig":"55"},{"size":6939,"mtime":1615799028670,"results":"64","hashOfConfig":"55"},{"size":8322,"mtime":1615797778300,"results":"65","hashOfConfig":"55"},{"size":6583,"mtime":1615798458164,"results":"66","hashOfConfig":"55"},{"size":5912,"mtime":1615797559040,"results":"67","hashOfConfig":"55"},{"size":10321,"mtime":1615795049349,"results":"68","hashOfConfig":"55"},{"size":7195,"mtime":1615802096792,"results":"69","hashOfConfig":"55"},{"size":6167,"mtime":1615799675855,"results":"70","hashOfConfig":"55"},{"size":9144,"mtime":1615799786657,"results":"71","hashOfConfig":"55"},{"size":9150,"mtime":1615800504187,"results":"72","hashOfConfig":"55"},{"size":6267,"mtime":1615800493348,"results":"73","hashOfConfig":"55"},{"size":7769,"mtime":1615802089473,"results":"74","hashOfConfig":"55"},{"size":7271,"mtime":1615797840865,"results":"75","hashOfConfig":"55"},{"size":341,"mtime":1612180577608,"results":"76","hashOfConfig":"55"},{"size":3893,"mtime":1616474358519,"results":"77","hashOfConfig":"55"},{"size":1622,"mtime":1611555399128,"results":"78","hashOfConfig":"55"},{"size":1929,"mtime":1611813206261,"results":"79","hashOfConfig":"55"},{"size":8798,"mtime":1615801010080,"results":"80","hashOfConfig":"55"},{"size":6214,"mtime":1615801006162,"results":"81","hashOfConfig":"55"},{"size":8540,"mtime":1615801892641,"results":"82","hashOfConfig":"55"},{"size":6133,"mtime":1615801890143,"results":"83","hashOfConfig":"55"},{"size":7687,"mtime":1615802033647,"results":"84","hashOfConfig":"55"},{"size":7732,"mtime":1615802111326,"results":"85","hashOfConfig":"55"},{"size":10360,"mtime":1615799083231,"results":"86","hashOfConfig":"55"},{"size":8412,"mtime":1617103016485,"results":"87","hashOfConfig":"55"},{"size":712,"mtime":1611896629902,"results":"88","hashOfConfig":"55"},{"size":17047,"mtime":1617017364929,"results":"89","hashOfConfig":"55"},{"size":7506,"mtime":1615809882473,"results":"90","hashOfConfig":"55"},{"size":1976,"mtime":1613737060071,"results":"91","hashOfConfig":"55"},{"size":1029,"mtime":1613729809956,"results":"92","hashOfConfig":"55"},{"size":1010,"mtime":1613729830499,"results":"93","hashOfConfig":"55"},{"size":769,"mtime":1613725786719,"results":"94","hashOfConfig":"55"},{"size":790,"mtime":1613730388987,"results":"95","hashOfConfig":"55"},{"size":791,"mtime":1614183898995,"results":"96","hashOfConfig":"55"},{"size":782,"mtime":1613729866017,"results":"97","hashOfConfig":"55"},{"size":803,"mtime":1613727274787,"results":"98","hashOfConfig":"55"},{"size":6913,"mtime":1613987655854,"results":"99","hashOfConfig":"55"},{"size":5751,"mtime":1614177081954,"results":"100","hashOfConfig":"55"},{"size":8682,"mtime":1614175967764,"results":"101","hashOfConfig":"55"},{"size":827,"mtime":1616065477684,"results":"102","hashOfConfig":"55"},{"size":2388,"mtime":1617013019563,"results":"103","hashOfConfig":"55"},{"size":169,"mtime":1616048065819,"results":"104","hashOfConfig":"55"},{"size":3530,"mtime":1617095581767,"results":"105","hashOfConfig":"55"},{"size":1021,"mtime":1616484898316,"results":"106","hashOfConfig":"55"},{"size":2827,"mtime":1617018150788,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"k59zjy",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"110"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"110"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"110"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"110"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"110"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"110"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"110"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"110"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"110"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"110"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"110"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"110"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"110"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"110"},"H:\\Ragu Htc\\project crud\\src\\index.js",[],["248","249"],"H:\\Ragu Htc\\project crud\\src\\reportWebVitals.js",[],"H:\\Ragu Htc\\project crud\\src\\App.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Layout\\User.js",["250","251","252"],"import React, { useState } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { menu } from \"./menu\";\r\nimport { hasChildren } from \"./utils\";\r\nimport TopNav from \"../Layout/TopNav\";\r\nimport './layoutdesign.css'\r\n\r\n\r\nexport default function User() { \r\n  return <div className = \"sidebar\" > \r\n    {\r\n        menu.map((item, key) => <MenuItem  \r\n        key={key} item={item} /> ) \r\n  }\r\n    </div> \r\n}\r\n\r\nconst MenuItem = ({ item }) => {\r\n  const Component = hasChildren(item) ? MultiLevel : SingleLevel;\r\n  return  <div >\r\n    <TopNav />\r\n    <Component  item={item} />\r\n    \r\n    </div> \r\n};\r\n\r\nconst SingleLevel = ({ item }) => {\r\n  let history = useHistory();\r\n  return (\r\n    <div >  \r\n          \r\n    <ListItem style={{color: '#e3e3e3' }}  \r\n    id = {window.location.pathname == item.link ? \"active\" : \" \"}\r\n    button onClick={() => {\r\n      \r\n      window.location.pathname = item.link\r\n      }}\r\n     \r\n      >\r\n      <ListItemIcon style={{color: 'white'}}>{item.icon}</ListItemIcon>\r\n     \r\n     <ListItemText  primary={item.title} /> \r\n    </ListItem>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst MultiLevel = ({ item }) => {\r\n  const { items: children } = item;\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      \r\n    <React.Fragment>\r\n      <ListItem  button onClick={handleClick}>\r\n        <ListItemIcon style={{color: 'white'}} >{item.icon}</ListItemIcon>\r\n       <ListItemText primary={item.title} /> \r\n        {open ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n      </ListItem>\r\n      <Collapse in={ open } style={{ width: '100%'}} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\"  >\r\n          {children.map((child, key) => (\r\n            <MenuItem   key={key} item={child} />\r\n          ))}\r\n        </List>\r\n      </Collapse>\r\n    </React.Fragment>\r\n    </div>\r\n  );\r\n  \r\n};\r\n","H:\\Ragu Htc\\project crud\\src\\components\\MyProfile\\MyProfile.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\ForgotPassword\\Forgotpassword.js",["253","254"],"import React from 'react';\r\nimport {Component } from 'react';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './forgotpasswordstyles.css';\r\nimport { Button,  Grid, TextField, withStyles,  Container} from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n});\r\n\r\nconst schema = yup.object().shape({ \r\n  newpassword: yup\r\n    .string()\r\n    .required(\"Please enter your new password\"),\r\n\r\n    oldpassword: yup\r\n    .string()\r\n    .required(\"Please enter your Old password\"),\r\n    \r\n  confirmpassword: yup\r\n    .string()\r\n    .required(\"Please confirm your confirm password\")\r\n    .notOneOf([yup.ref(\"oldpassword\")],\"Old Password and new password cannot be same\")\r\n    .when(\"newpassword\", {\r\n      is: newpassword => (newpassword && newpassword.length > 0 ? true : false),\r\n      then: yup.string().oneOf([yup.ref(\"newpassword\")], \"Password doesn't match\")\r\n    })\r\n});\r\n\r\nclass Forgotpassword extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            store: null,\r\n            password: null,\r\n            new_password: null\r\n        }\r\n    }\r\n    \r\n    submit() {\r\n        const pwdVal = document.getElementById(\"oldpwd\").value;\r\n        const confirmVal = document.getElementById(\"newpwd\").value;\r\n        const val = JSON.parse(window.localStorage.getItem('login'));\r\n// Check whether username and password matches\r\n       let token = \"Bearer \" + (val.token);\r\n        fetch('http://localhost:3000/users/change-password', {\r\n                method: \"POST\", \r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization' : token,\r\n                },\r\n                body: JSON.stringify({\r\n                  'password': pwdVal,\r\n                  'new_password' : confirmVal\r\n                })\r\n            }).then((response) => {\r\n                console.log(response);\r\n                const status = response.status;\r\n                if(status == 500 ){\r\n                  alert('Enter your current password correctly');\r\n                } else if(status == 200){\r\n                  alert('Password changede successfully');\r\n                  localStorage.clear();\r\n                  window.location.reload(false)\r\n                }\r\n            })   \r\n    } \r\n    \r\n    render() {  \r\n    const { classes } = this.props;\r\n    return (\r\n        <div>\r\n      <Formik\r\n      initialValues={{\r\n        oldpassword: \"\",\r\n        newpassword: \"\",\r\n        confirmpassword: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit = {() => { this.submit() }}\r\n    >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n    <Container className={classes.container} maxWidth=\"xs\">\r\n      {/* <form onClick={() => { this.submit() }}> */}\r\n       <form onSubmit={handleSubmit}>\r\n\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} >\r\n              <h2>Enter the details to change password</h2>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <TextField \r\n                  fullWidth  label=\"Old Password\" id=\"oldpwd\" name=\"oldpassword\" size=\"small\" variant=\"outlined\"  \r\n                  value={values.oldpassword}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}                \r\n                />\r\n                 {errors.oldpassword && touched.oldpassword && (\r\n                        <div className=\"input-feedback\">{errors.oldpassword}</div>\r\n                      )}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth label=\"New Password\" id=\"newpwd\"  name=\"newpassword\" size=\"small\"  type=\"password\"  variant=\"outlined\"\r\n                  value={values.newpassword}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                />\r\n                {errors.newpassword && touched.newpassword && (\r\n                        <div className=\"input-feedback\">{errors.newpassword}</div>\r\n                      )}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth label=\"Confirm Password\" id=\"confirmpwd\"  name=\"confirmpassword\" size=\"small\"  type=\"password\"  variant=\"outlined\"\r\n                  value={values.confirmpassword}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                />\r\n              {errors.confirmpassword && touched.confirmpassword && (\r\n                        <div className=\"input-feedback\">{errors.confirmpassword}</div>\r\n                      )}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Button color=\"secondary\" fullWidth type=\"submit\" variant=\"contained\">\r\n              Submit\r\n            </Button>\r\n            {this.state.response}\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Container>\r\n        );\r\n    }}\r\n      </Formik>\r\n </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default withStyles(styles)(Forgotpassword);","H:\\Ragu Htc\\project crud\\src\\components\\Login\\Login.js",["255","256","257"],"import React, { Component } from 'react';\r\nimport { Grid, TextField, Button, InputAdornment} from '@material-ui/core';\r\nimport { LockRounded, AccountCircle } from \"@material-ui/icons\"\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nexport default class Login extends Component {\r\n\r\n    // Initializing state values\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: null,\r\n            password: null,\r\n            login: false,\r\n            isLogged: false,\r\n            store: null,\r\n            username: null,\r\n            user: null,\r\n            redirect: null\r\n        }\r\n    }\r\n    \r\n    // Store the token to localStorage\r\n    login() {\r\n        \r\n        axios.post('http://localhost:8080/users/login', {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }).then( result =>{\r\n            const tokenValue = result.headers['authorization']\r\n            localStorage.setItem('login', JSON.stringify({\r\n                            token: tokenValue\r\n                        }))            \r\n                            axios.get(`http://localhost:8080/users/${result.headers['userid']}`,{\r\n                                headers: {\r\n                                    \"Authorization\": tokenValue\r\n                                }\r\n                            }).then( response => {\r\n                                console.log(response.data.loginType); \r\n                                if(response.data.loginType == \"Customer\"){\r\n                                    localStorage.setItem('customer', JSON.stringify({\r\n                                    userDetails: response.data\r\n                            }))\r\n                            window.location.pathname = \"/home/menu\" \r\n                                }\r\n                            else if(response.data.loginType == \"Admin\"){\r\n                                localStorage.setItem('admin', JSON.stringify({\r\n                                    userDetails: response.data\r\n                            })) \r\n                            window.location.pathname = \"/user/viewcatalog\"                        \r\n                            }\r\n                            })       \r\n          }).catch((error) => {\r\n              console.log(error);\r\n              this.setState({ isLogged: true });\r\n          })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n          }\r\n        return (\r\n            <div>\r\n                <div >\r\n\r\n                    {/* Login Cover image */}\r\n                <Grid container style={ {minHeight:'100vh'}}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <img src=\"https://images.unsplash.com/photo-1604382354936-07c5d9983bd3?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=750&q=80\"\r\n                         style={{width:'130vh', height:'100%', objectFit: 'cover'}} alt=\"sample\"/>\r\n                    </Grid>\r\n                <Grid  container item xs={12} sm={6}  alignItems=\"center\" direction=\"center\" justify=\"space-evenly\" style={{padding: 50}}> \r\n                    <div/>\r\n                    <div >\r\n                        {/* Logo Image */}\r\n                        <Grid container justify=\"center\">\r\n                            <img src= \"https://st2.depositphotos.com/3687485/9049/v/950/depositphotos_90493674-stock-illustration-pizza-flat-icon-logo-template.jpg\" width={140} alt=\"Logo\"/>\r\n                        </Grid>\r\n                        { this.state.isLogged ? <h5 style={{color:'red'}} >Please Enter a Valid Password and Email</h5> : \" \"}\r\n                        <TextField type=\"email\" onChange={(event) => { this.setState({ email: event.target.value }) }}\r\n                        label='EMAIL' required name=\"email\" fullWidth  \r\n                        InputProps={{startAdornment: <InputAdornment position=\"start\"> <AccountCircle /> </InputAdornment>}} /> <br />\r\n\r\n                        <div style={{height:20}} />\r\n\r\n                        <TextField type=\"password\" onChange={(event) => { this.setState({ password: event.target.value }) }}\r\n                        label='PASSWORD' name=\"password\" placeholder='Enter password' required type='password' fullWidth \r\n                        InputProps={{startAdornment: <InputAdornment  position=\"start\"> <LockRounded /> </InputAdornment>}} /> <br />\r\n\r\n                        <div style={{height:20}} />\r\n                        <Button onClick={() => { this.login() }} type='submit' color='primary' variant=\"contained\"  fullWidth>Sign in</Button>\r\n                    </div>\r\n                    <div style={{height:20}} />\r\n                    <Grid container justify=\"center\" style={{padding:50}} spacing={3}>\r\n                    <Grid item>\r\n                        <Button  color=\"primary\" >Forgot password</Button>\r\n                    </Grid>\r\n                                \r\n                    <Grid item>\r\n                        <Button \r\n                        onClick= { () => { this.setState({ redirect: \"/signup\" })}}\r\n                        color=\"primary\" >Signup</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                </Grid>\r\n                </Grid>    \r\n                        </div>\r\n            </div>\r\n        )\r\n    }\r\n}","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSize.js",["258","259","260"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport './popupstyle.css';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport './Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n          },\r\n          '& .MuiTextField-root': {\r\n              margin: theme.spacing(1),\r\n              width: '22ch',\r\n            },\r\n      },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  });\r\n\r\n  // Delete notification\r\n  function notifcation(){\r\n    store.addNotification({\r\n      title: \"Deleted\",\r\n      message: \"Size has been successfully Deleted\",\r\n      type: \"danger\",\r\n      insert: \"top\",\r\n      container: \"center\",\r\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n      dismiss: {\r\n        duration: 5000,\r\n        onScreen: true\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass PizzaSize extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          crust_datas:[],\r\n          crustArray:[],\r\n          open: false,\r\n          pop: false,\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          search: \"\",\r\n          redirect: null \r\n      };\r\n    }\r\n\r\n//Delete Dialog box\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true\r\n    })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    })\r\n  };\r\n\r\n  //Popup dialog box\r\n  handlePopupOpen = () => {\r\n    this.setState({\r\n      pop: true\r\n    })\r\n  };\r\n\r\n  handlePopupClose = () => {\r\n    this.setState({\r\n      pop: false\r\n    })\r\n  };\r\n\r\n    componentDidMount() {\r\n        this.get()\r\n    }\r\n//Pagination\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n\r\n    get = () => {\r\n        axios.get('/PizzaSize')\r\n        .then( result =>{\r\n          this.setState({\r\n             records : result.data,\r\n            });\r\n        });\r\n      }\r\n\r\n      edit = (id) => {\r\n         this.setState({ redirect: \"/user/editsize/\"+id })\r\n      }\r\n      \r\n      delete = (id, e) =>{\r\n        axios.delete(`http://localhost:3333/PizzaSize/${id}`)\r\n      .then(res => {\r\n        const records = this.state.records.filter(item => item.id !== id);\r\n        this.setState({records,\r\n          open: false\r\n        });\r\n        notifcation();\r\n      })\r\n      }\r\n\r\n      getCrust = (id) => {\r\n        axios.get(`/PizzaSize/${id}`)\r\n        .then( result =>{\r\n          this.setState({\r\n            crustArray:[]\r\n          })\r\n             {result.data.crustAvail.map((x, i) => ( \r\n              axios.get(`/PizzaCrust/${x}`).then(\r\n                res => {\r\n                 let crust_datas=[...this.state.crustArray]\r\n                  crust_datas.push(res.data.name)\r\n                  this.setState({\r\n                    crustArray: crust_datas,\r\n                    pop: true\r\n                    });\r\n                    console.log(\" From First console \" + res.data.name)\r\n                }\r\n              )\r\n             ))}\r\n            console.log(\" From second console \" + result.data.crustAvail)\r\n        });\r\n      }\r\n\r\n      onSearch = e => {\r\n        this.setState({ search: e.target.value });\r\n      };\r\n    render() {\r\n        const { classes } = this.props;\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n          this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n          if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n          }\r\n        return (\r\n                <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Pizza Size</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addsize\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Size <AddIcon /> </Button> &nbsp; \r\n    <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Size\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n    </Grid>\r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <b>Size </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Serves </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price</b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <center> <b>Actions  </b> </center> </StyledTableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        \r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.size.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) => (\r\n            <TableRow key={x.id}>\r\n              <StyledTableCell className=\"fontsfamily\" align=\"left\"> <p> {x.size} </p></StyledTableCell>\r\n              <StyledTableCell className=\"fontsfamily\" align=\"left\"> <p> {x.serves} </p></StyledTableCell>\r\n              <StyledTableCell  className=\"fontsfamily\" align=\"left\"> <p> {x.price} </p></StyledTableCell>\r\n\r\n              <StyledTableCell align=\"center\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button>    &nbsp;         \r\n              <Button variant=\"contained\" \r\n              color=\"primary\" onClick={(e) => this.getCrust(x.id, e)}> Crust </Button> &nbsp;\r\n\r\n{/* Dialog box for delete button */}\r\n    <div>\r\n      <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </div>\r\n\r\n      {/* Dialog box for crust list */}\r\n\r\n      <div>\r\n      <Dialog\r\n        open={this.state.pop}\r\n        onClose={this.handlePopupClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Following crust are available for respective size\"}</DialogTitle>\r\n        {/* {this.getCrust(x.id)} */}\r\n        \r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          {this.state.crustArray.map((x, i) => ( \r\n          <ul>\r\n                <li key={i}>{x}</li>\r\n          </ul>\r\n          ))}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n         \r\n        <DialogActions>\r\n          <Button onClick={this.handlePopupClose} color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </div>\r\n      \r\n              \r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(PizzaSize);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditSize.js",["261","262"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid, Container, Checkbox, FormControlLabel, withStyles } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '50ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        size: yup\r\n          .string()\r\n          .required(\"Please enter crust name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          serves: yup\r\n          .string()\r\n          .required(\"Please enter the description\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\nclass EditSize extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          size:\"\",\r\n          serves: \"\",\r\n          price: \"\",\r\n          crustAvail:[],\r\n          crust_datas:[],\r\n          checkboxData:[],\r\n          redirect: null\r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.get();\r\n        this.getCrust();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    crustSelection(e){\r\n      let index\r\n      let crustArray = [...this.state.crustAvail];\r\n  \r\n      if(e.target.checked == true){\r\n        crustArray.push(e.target.value);\r\n       }else {\r\n        index = crustArray.indexOf(+e.target.value)\r\n        crustArray.splice(index, 1)\r\n       }\r\n       this.setState({\r\n        crustAvail: crustArray\r\n       })\r\n    }\r\n\r\n    get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/PizzaSize/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data.crustAvail);\r\n          // this.setState({ records: result.data});\r\n          this.setState({\r\n            data : result.data,\r\n            size: result.data.size,\r\n            serves: result.data.serves,\r\n            price: result.data.price,\r\n            checkboxData : result.data.crustAvail,\r\n            crustAvail : result.data.crustAvail\r\n        })\r\n        });\r\n      }\r\n\r\n      getCrust = () => {\r\n        axios.get('/PizzaCrust')\r\n        .then( result =>{\r\n          this.setState({\r\n            crust_datas: result.data,\r\n            \r\n            });\r\n        });\r\n      }\r\n\r\n      // update = () => {\r\n      //   const  id  = this.state.data.id;\r\n      //   axios.put(`http://localhost:3333/PizzaSize/`+id, {\r\n      //       size: this.state.size,\r\n      //       serves: this.state.serves,\r\n      //       price: this.state.price,\r\n      //       crustAvail: this.state.crustAvail\r\n    \r\n      //   })\r\n      //     .then(res => {\r\n      //       console.log(res);\r\n      //       console.log(res.data);\r\n      //       notifcation();\r\n      //       setInterval(() => {\r\n      //         {window.location.pathname = \"/user/pizzasize\"}\r\n      //       }, 1500);\r\n      //     })\r\n      // }\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        size: this.state.size,\r\n        serves: this.state.serves,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n          axios.put(`http://localhost:3333/PizzaSize/`+id, {\r\n              size: values.size,\r\n              serves: values.serves,\r\n              price: values.price,\r\n              crustAvail: this.state.crustAvail\r\n      \r\n          })\r\n            .then(res => {\r\n              console.log(res);\r\n              console.log(res.data);\r\n              notifcation();\r\n              setInterval(() => {\r\n                {window.location.pathname = \"/user/pizzasize\"}\r\n              }, 1500);\r\n            })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n          <Container>\r\n            \r\n        <h1 className=\"header\" >Update Size</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"size\"\r\n          label=\"Size\"\r\n          variant=\"outlined\"\r\n          name=\"size\"\r\n          onChange={handleChange}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur}\r\n          value={values.size}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        {errors.size && touched.size && (\r\n                        <div className=\"input-feedback errors\">{errors.size}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"serves\"\r\n          label=\"Serves\"\r\n          variant=\"outlined\"\r\n          name=\"serves\"\r\n          type=\"number\" \r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          value={values.serves}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        /> \r\n        {errors.serves && touched.serves && (\r\n                        <div className=\"input-feedback errors\">{errors.serves}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <br />\r\n        <Grid>  \r\n       <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">Select Crust of Pizza</FormLabel>\r\n        {this.state.crust_datas.map((x) => (          \r\n          <FormControlLabel style={{paddingLeft:5}} key={x.id}\r\n          control = {\r\n          <Checkbox \r\n          value = {x.id}\r\n          defaultChecked = {this.state.checkboxData.includes(JSON.stringify(x.id)) ? true : false}\r\n          onChange={this.crustSelection.bind(this)}\r\n          />\r\n          }\r\n          label={x.name }\r\n          />\r\n        ))}\r\n        </FormControl>\r\n        <hr />\r\n        </Grid>\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/pizzasize\" })}} \r\n       variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>  \r\n    </Container>\r\n     );\r\n    }}   \r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditSize);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddSize.js",["263","264","265"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport{Checkbox, Container, FormControlLabel,Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n\r\n       \r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        size: yup\r\n          .string()\r\n          .required(\"Please enter crust name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          serves: yup\r\n          .number()\r\n          .required(\"Please enter no. of serve\")\r\n          .positive('Enter positive numbers only')\r\n          .max(20),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\nclass AddSize extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          name : \"React\",\r\n          records: [],\r\n          data:  [],\r\n          crustAvail: [],\r\n          crust_datas:[],\r\n          size:\"\",\r\n          serves: \"\",\r\n          price: \"\",\r\n          redirect: null        \r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.getCrust()\r\n      }\r\n\r\n      getCrust = () => {\r\n        axios.get('/PizzaCrust')\r\n        .then( result =>{\r\n          this.setState({\r\n            crust_datas: result.data,\r\n            });\r\n        });\r\n      }\r\n\r\n    crustSelection = (e) =>{\r\n    let index\r\n    let crustArray = [...this.state.crustAvail];\r\n\r\n    if(e.target.checked == true){\r\n      crustArray.push(e.target.value);\r\n     }else {\r\n      index = crustArray.indexOf(+e.target.value)\r\n      crustArray.splice(index, 1)\r\n     }\r\n     this.setState({\r\n      crustAvail: crustArray\r\n     })\r\n   }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n        <div style={{height:60}}  />\r\n        <Formik\r\n      initialValues={{\r\n        size: \"\",\r\n        serves: \"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit={\r\n        values => {\r\n        axios.post('/PizzaSize', {\r\n          size: values.size,\r\n          serves: values.serves,\r\n          price: values.price,\r\n          crustAvail: values.crustAvail\r\n  \r\n      }).then( result =>{\r\n          console.log(result.data);\r\n          this.setState({ records: result.data});\r\n          notifcation();\r\n          setInterval(() => {\r\n            {window.location.pathname = \"/user/pizzasize\"}\r\n          }, 1500);\r\n        } )\r\n      }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n      <Container>\r\n        <h1 className=\"header\" >Add Size</h1>\r\n\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\">        \r\n        <TextField\r\n          required\r\n          id=\"size\"\r\n          name=\"size\"\r\n          label=\"Size\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.size && touched.size && (\r\n                        <div className=\"input-feedback errors \">{errors.size}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"serves\"\r\n          label=\"Serves\"\r\n          name=\"serves\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          type=\"number\" \r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.serves && touched.serves && (\r\n                        <div className=\"input-feedback errors \">{errors.serves}</div>\r\n                      )} <br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          name=\"price\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <hr />\r\n        <Grid>  \r\n       <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">Select Crust of Pizza</FormLabel>\r\n        {this.state.crust_datas.map((x) => (          \r\n          <FormControlLabel style={{paddingLeft:5}} key={x.id}\r\n          name=\"crustAvail\"\r\n          control = {\r\n          <Checkbox \r\n          value = {x.id}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          />\r\n          }\r\n          label={x.name}\r\n          />\r\n        ))}\r\n        </FormControl>\r\n        <hr />\r\n        </Grid>\r\n\r\n      <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/pizzasize\" })}} variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>  \r\n    </Container>\r\n    );\r\n  }}\r\n  </Formik>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AddSize);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaCrust.js",["266","267"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport './Styles/style.css'\r\n\r\n\r\n\r\n\r\nfunction notifcation(){\r\n  store.addNotification({\r\n    title: \"Deleted\",\r\n    message: \"Size has been successfully Deleted\",\r\n    type: \"danger\",\r\n    insert: \"top\",\r\n    container: \"center\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n      onScreen: true\r\n    }\r\n  });\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n    \r\n    \r\n  });\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass PizzaCrust extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          open: false,\r\n          search: \"\" ,\r\n          redirect: null\r\n      \r\n      };\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n      this.setState({\r\n        open: true\r\n      })\r\n    };\r\n\r\n    handleClose = () => {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    };\r\n    \r\n  componentDidMount() {\r\n    this.get()\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      \r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n\r\n    get = () => {\r\n        axios.get('/PizzaCrust')\r\n        .then( result =>{\r\n            this.setState({\r\n             records: result.data,\r\n              });\r\n        });\r\n        }\r\n\r\n    edit = (id) => {\r\n        this.setState({ redirect: \"/user/editcrust/\"+id});\r\n    }\r\n\r\n    delete = (id, e) => {\r\n        axios.delete(`http://localhost:3333/PizzaCrust/${id}`)\r\n      .then(res => {\r\n        const records = this.state.records.filter(item => item.id !== id);\r\n        this.setState({\r\n          open: false,\r\n          records\r\n        });\r\n        notifcation();\r\n      })\r\n    }\r\n    onSearch = e => {\r\n      this.setState({ search: e.target.value });\r\n    };    \r\n    render() {\r\n      const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n        this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                 <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Crust List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addcrust\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Crust <AddIcon /> </Button> &nbsp; \r\n    <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Crust name\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n    </Grid> \r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <b> Crust Name</b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b> Description </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.name.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) => (\r\n            <TableRow  key={x.id}>\r\n              <StyledTableCell  > <p > {x.name} </p> </StyledTableCell>\r\n              <StyledTableCell  align=\"left\"> <p> {x.Description} </p></StyledTableCell>\r\n              <StyledTableCell  align=\"left\"> <p> {x.price} </p> </StyledTableCell>\r\n\r\n              <StyledTableCell align=\"left\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <div style={{height:'5px'}}/>\r\n              {/* <Button variant=\"contained\"  color=\"secondary\" onClick={(e) => this.delete(x.id, e)}> Delete <DeleteIcon /> </Button> */}\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button> \r\n\r\n              <div>\r\n              <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          \r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(PizzaCrust);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditCrust.js",["268"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '90ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({ \r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        crust_name: yup\r\n          .string()\r\n          .required(\"Please enter crust name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          crust_desc: yup\r\n          .string()\r\n          .required(\"Please enter the description\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\nclass EditCrust extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          Description: \"\",\r\n          price: \"\",\r\n          redirect: null\r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.get();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/PizzaCrust/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data);\r\n          // this.setState({ records: result.data});\r\n          this.setState({\r\n            data : result.data,\r\n            name:result.data.name,\r\n            Description: result.data.Description,\r\n            price: result.data.price,\r\n        })\r\n        });\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n             <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        crust_name: this.state.name,\r\n        crust_desc: this.state.Description,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit={\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n        axios.put(`http://localhost:3333/PizzaCrust/`+id, {\r\n          name: values.crust_name,\r\n          Description: values.crust_desc,\r\n          price: values.price,\r\n    \r\n        })\r\n          .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/pizzacrust\"}\r\n            }, 1500); \r\n          })\r\n        }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n          <Container>\r\n            \r\n        <h1 className=\"header\" >Update Crust</h1>\r\n        <div style={{paddingLeft:'270px'}}>   \r\n        <form onSubmit={handleSubmit} className={classes.root}>\r\n        <ReactNotification />\r\n        <TextField\r\n          \r\n          id=\"name\"\r\n          name=\"crust_name\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.crust_name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        /> <br />\r\n        {errors.crust_name && touched.crust_name && (\r\n                        <div className=\"input-feedback errors\">{errors.crust_name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Description\"\r\n          label=\"Description\"\r\n          name=\"crust_desc\"\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          multiline\r\n          rows={2}\r\n          rowsMax={4}\r\n          value={values.crust_desc}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          //onChange={this.OnchangeDesc}\r\n        />\r\n        <br />\r\n        {errors.crust_desc && touched.crust_desc && (\r\n                        <div className=\"input-feedback errors\">{errors.crust_desc}</div>\r\n                      )} \r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          onChange={handleChange}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n        />\r\n        <br />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n       \r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\" variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/pizzacrust\" })}} \r\n        variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n       </form>\r\n    </div> \r\n    </Container>\r\n     );\r\n    }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditCrust);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddCrust.js",["269"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n           maxHeight : '4px'\r\n        },\r\n      });\r\n\r\n    //  Success notification\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n      // Check if any  alphabet present in the textfield\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      // Form validation\r\n      const schema = yup.object().shape({ \r\n        crust_name: yup\r\n          .string()\r\n          .required(\"Please enter crust name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          crust_desc: yup\r\n          .string()\r\n          .required(\"Please enter the description\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\n\r\nclass AddCrust extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          Description: \"\",\r\n          price: \"\",\r\n          fields: {},\r\n          error: false,\r\n          redirect: null\r\n        \r\n      };\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n             <div style={{height:60}}  />\r\n             <Formik\r\n      initialValues={{\r\n        crust_name: \"\",\r\n        crust_desc: \"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit = {values =>{\r\n        axios.post('/PizzaCrust', {\r\n          name: values.crust_name,\r\n          Description: values.crust_desc,\r\n          price: values.price,\r\n  \r\n      }).then( result =>{\r\n          console.log(result.data);\r\n          this.setState({ records: result.data});\r\n          notifcation(); \r\n          // Redirect to view page aftr successful addition\r\n          setInterval(() => {\r\n            {window.location.pathname = \"/user/pizzacrust\"}\r\n          }, 1500);           \r\n        } )\r\n      }}\r\n    >\r\n      {/* Form validation props */}\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n      <Container>\r\n        <h1 className=\"header\" >Add Crust</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">    \r\n        <TextField\r\n          id=\"name\"\r\n          name=\"crust_name\"\r\n          label=\"Crust Name\"\r\n          variant=\"outlined\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.crust_name}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur} \r\n          //onChange={this.OnchangeName}\r\n        />\r\n        {errors.crust_name && touched.crust_name && (\r\n                        <div className=\"input-feedback errors\">{errors.crust_name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Description\"\r\n          label=\"Pizza Description\"\r\n          name=\"crust_desc\"\r\n          multiline\r\n          rows={2}\r\n          rowsMax={4}\r\n          variant=\"outlined\" \r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          //onChange={this.OnchangeDesc}\r\n        /> \r\n        {errors.crust_desc && touched.crust_desc && (\r\n                        <div className=\"input-feedback errors \" >{errors.crust_desc}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          value={values.price}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          variant=\"outlined\"\r\n          //onChange={this.OnchangePrice}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button  onClick={ () => { this.setState({ redirect: \"/user/pizzacrust\" })}} variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>\r\n    </Container>\r\n    );\r\n  }}\r\n    </Formik>\r\n            </div>     \r\n                 \r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AddCrust);","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\UploadPizza.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditVegToppings.js",["270"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid,Container, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '90ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter topping name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please enter the type\"),\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the image Url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\nclass EditToppings extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null\r\n        \r\n      };\r\n      }\r\n      componentDidMount() {\r\n        this.get();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n      get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/vegToppings/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data);\r\n          this.setState({\r\n            data : result.data,\r\n            name:result.data.name,\r\n            imgUrl: result.data.imgUrl,\r\n            type:result.data.type,\r\n            price: result.data.price,\r\n        })\r\n        });\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        name: this.state.name,\r\n        type: this.state.type,\r\n        imgUrl: this.state.imgUrl,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n            axios.put(`http://localhost:3333/vegToppings/`+id, {\r\n                name: values.name,\r\n                type: values.type,\r\n                imgUrl: values.imgUrl,\r\n                price: values.price,\r\n        \r\n            })\r\n              .then(res => {\r\n                console.log(res);\r\n                console.log(res.data);\r\n                notifcation();\r\n                setInterval(() => {\r\n                  {window.location.pathname = \"/user/vegToppings\"}\r\n                }, 1500);\r\n              })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n        return(\r\n          <Container>\r\n        <h1 className=\"header\" >Update Toppings</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root} autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          name=\"name\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          name=\"type\"\r\n          value={values.type}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )} <br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"Img-Url\"\r\n          label=\"Image Url\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          name=\"imgUrl\"\r\n          value={values.imgUrl}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n        <br />\r\n      <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button  onClick={ () => { this.setState({ redirect: \"/user/vegToppings\" })}}\r\n       variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div> \r\n    </Container>\r\n     );\r\n    }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditToppings);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddVegToppings.js",["271","272","273"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\nimport ReactNotification from 'react-notifications-component';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n        .string()\r\n        .required(\"Please enter toppings name\")\r\n        .matches(checkAlphabet, 'Numbers not allowed' ),\r\n    \r\n        type: yup\r\n        .string()\r\n        .required(\"Please enter the type\")\r\n        .matches(checkAlphabet, 'Numbers not allowed' ),\r\n\r\n\r\n        imgUrl: yup\r\n        .string()\r\n        .required(\"Please enter the image Url\"),\r\n        \r\n        price: yup\r\n        .number()\r\n        .required(\"Please enter the price\")\r\n        .positive('Enter positive numbers only')\r\n        .max(800)\r\n        \r\n    });\r\n\r\nclass AddToppings extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null\r\n        \r\n      };\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        type:\"\",\r\n        imgUrl: \"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit ={\r\n        values => {\r\n          axios.post('/vegToppings', {\r\n            name: values.name,\r\n            type: values.type,\r\n            imgUrl:values.imgUrl,\r\n            price: values.price,\r\n    \r\n        }).then( result =>{\r\n            console.log(result.data);\r\n            this.setState({ records: result.data});\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/vegToppings\"}\r\n            }, 1500);\r\n          } )\r\n        }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n      <Container>\r\n        <h1 className=\"header\" >Add Veg Toppings</h1>\r\n\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">        \r\n        <TextField\r\n          id=\"name\"\r\n          name = \"name\"\r\n          label=\"Toppings Name\"\r\n          variant=\"outlined\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          name=\"type\"\r\n          variant=\"outlined\" \r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        /> \r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"Image-Url\"\r\n          label=\"Image Url\"\r\n          variant=\"outlined\" \r\n          name=\"imgUrl\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          type=\"price\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button  type=\"submit\" variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/vegToppings\" })}}\r\n        variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>\r\n    </Container>\r\n    );\r\n  }}\r\n  </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(AddToppings);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\VegToppings.js",["274","275","276","277"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ReactPaginate from 'react-paginate';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport './Styles/style.css'\r\n\r\n\r\nfunction notifcation(){\r\n  store.addNotification({\r\n    title: \"Deleted\",\r\n    message: \"Data has been successfully Deleted\",\r\n    type: \"danger\",\r\n    insert: \"top\",\r\n    container: \"center\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n      onScreen: true\r\n    }\r\n  });\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n  });\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass VegToppings extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          orgtableData: [],\r\n          offset: 0,\r\n          open: false,\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          search: \"\",\r\n          redirect: null\r\n      };\r\n      this.handlePageClick = this.handlePageClick.bind(this);\r\n    }\r\n    handlePageClick = (e) => {\r\n      const selectedPage = e.selected;\r\n      const offset = selectedPage * this.state.perPage;\r\n  \r\n      this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n      }, () => {\r\n          this.loadMoreData()\r\n      });\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true\r\n    })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    })\r\n  };\r\n\r\n  loadMoreData() {\r\n    const data = this.state.orgtableData;\r\n    \r\n    const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n    this.setState({\r\n      pageCount: Math.ceil(data.length / this.state.perPage),\r\n      records:slice\r\n    })\r\n    }\r\n    componentDidMount() {\r\n      this.get()\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      \r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n  \r\n      get = () => {\r\n          axios.get('/vegToppings')\r\n          .then( result =>{\r\n               this.setState({ \r\n                records : result.data\r\n                });\r\n          });\r\n          }\r\n  \r\n      edit = (id) => {\r\n        this.setState({ redirect: \"/user/editvegtoppings/\"+id});\r\n      }\r\n  \r\n      delete = (id, e) => {\r\n          axios.delete(`http://localhost:3333/vegToppings/${id}`)\r\n        .then(res => {\r\n          const records = this.state.records.filter(item => item.id !== id);\r\n          this.setState({records,\r\n            open: false});\r\n          notifcation();\r\n        })\r\n      }\r\n      onSearch = e => {\r\n        this.setState({ search: e.target.value });\r\n      };\r\n\r\n    render() {\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n        this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Toppings List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addvegtoppings\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Toppings <AddIcon /> </Button> &nbsp; \r\n    <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Topping Name\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n    </Grid> \r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <b> Topping Name</b></StyledTableCell>\r\n            <StyledTableCell> <b> Topping Image </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Type </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\r\n            val.type.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) =>  (\r\n            <TableRow key={x.id}>\r\n              <StyledTableCell  component=\"th\" scope=\"row\"> <p> {x.name} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n              <img src = {x.imgUrl} />\r\n                </StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p>{x.price} </p> </StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.type} </p></StyledTableCell>\r\n\r\n              <StyledTableCell align=\"left\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button>    &nbsp;\r\n              <div>\r\n        <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(VegToppings);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\NonVegToppings.js",["278","279","280","281"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ReactPaginate from 'react-paginate';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nfunction notifcation(){\r\n  store.addNotification({\r\n    title: \"Deleted\",\r\n    message: \"Data has been successfully Deleted\",\r\n    type: \"danger\",\r\n    insert: \"top\",\r\n    container: \"center\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n      onScreen: true\r\n    }\r\n  });\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n  });\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass VegToppings extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          orgtableData: [],\r\n          offset: 0,\r\n          open: false,\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          search: \"\",\r\n          redirect: null\r\n      };\r\n      this.handlePageClick = this.handlePageClick.bind(this);\r\n    }\r\n    handlePageClick = (e) => {\r\n      const selectedPage = e.selected;\r\n      const offset = selectedPage * this.state.perPage;\r\n  \r\n      this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n      }, () => {\r\n          this.loadMoreData()\r\n      });\r\n  };\r\n\r\n  loadMoreData() {\r\n    const data = this.state.orgtableData;\r\n    \r\n    const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n    this.setState({\r\n      pageCount: Math.ceil(data.length / this.state.perPage),\r\n      records:slice\r\n    })\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n      this.setState({\r\n        open: true\r\n      })\r\n    };\r\n  \r\n    handleClose = () => {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.get()\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      \r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n  \r\n      get = () => {\r\n          axios.get('/nonVegToppings')\r\n          .then( result =>{\r\n               this.setState({ \r\n                records : result.data,\r\n                });\r\n          });\r\n          }\r\n  \r\n      edit = (id) => {\r\n        this.setState({ redirect: \"/user/editnonvegtoppings/\"+id});\r\n      }\r\n  \r\n      delete = (id, e) => {\r\n          axios.delete(`http://localhost:3333/nonVegToppings/${id}`)\r\n        .then(res => {\r\n          const records = this.state.records.filter(item => item.id !== id);\r\n          this.setState({records,\r\n            open: false});\r\n          notifcation();\r\n        })\r\n      }\r\n      onSearch = e => {\r\n        this.setState({ search: e.target.value });\r\n      };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n        this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Toppings List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addnonvegtoppings\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Toppings <AddIcon /> </Button> &nbsp; \r\n    <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Topping Name\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n    </Grid> \r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <h4>  Topping Name </h4> </StyledTableCell>\r\n            <StyledTableCell> <b> Topping Image </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Type </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\r\n            val.type.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) =>  (\r\n            <TableRow key={x.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\"> <p> {x.name} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n              <img src = {x.imgUrl} />\r\n                </StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.price} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.type} </p></StyledTableCell>\r\n\r\n              <StyledTableCell align=\"left\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button>    &nbsp;\r\n\r\n        <div>\r\n        <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(VegToppings);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\AddNonVegToppings.js",["282","283","284"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter Topping name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please enter the type\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the image url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n          \r\n      });\r\n\r\nclass AddToppings extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null\r\n        \r\n      };\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n              <div style={{height:60}}  />\r\n              <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        type: \"\",\r\n        imgUrl: \"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit = {\r\n        values =>{\r\n          axios.post('/nonVegToppings', {\r\n            name: values.name,\r\n            type: values.type,\r\n            imgUrl:values.imgUrl,\r\n            price: values.price,\r\n    \r\n        }).then( result =>{\r\n            console.log(result.data);\r\n            this.setState({ records: result.data});\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/nonvegToppings\"}\r\n            }, 1500); \r\n          } )\r\n        }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n        <Container>\r\n        <h1 className=\"header\" >Add Toppings</h1>\r\n\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">        \r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          name=\"name\"\r\n          label=\"Toppings Name\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          name=\"type\"\r\n          variant=\"outlined\" \r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        /> \r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"Image-Url\"\r\n          label=\"Image Url\"\r\n          name=\"imgUrl\"\r\n          variant=\"outlined\" \r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onBlur={handleBlur} \r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/nonVegToppings\" })}}\r\n        variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n       \r\n    </form>\r\n    </div>\r\n    </Container>\r\n    );\r\n  }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(AddToppings);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\EditNonVegToppings.js",["285"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid, withStyles, Container } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '90ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter toppings name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please enter the type\"),\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the image Url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\nclass EditToppings extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null\r\n        \r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.get();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n      get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/nonVegToppings/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data);\r\n          this.setState({\r\n            data : result.data,\r\n            name:result.data.name,\r\n            imgUrl: result.data.imgUrl,\r\n            type:result.data.type,\r\n            price: result.data.price,\r\n        })\r\n        });\r\n      }\r\n\r\n      // update = () => {\r\n      //   const  id  = this.state.data.id;\r\n      //   axios.put(`http://localhost:3333/nonVegToppings/`+id, {\r\n      //       name: this.state.name,\r\n      //       type: this.state.type,\r\n      //       imgUrl: this.state.imgUrl,\r\n      //       price: this.state.price,\r\n    \r\n      //   })\r\n      //     .then(res => {\r\n      //       console.log(res);\r\n      //       console.log(res.data);\r\n      //       notifcation();\r\n      //       setInterval(() => {\r\n      //         {window.location.pathname = \"/user/nonvegToppings\"}\r\n      //       }, 1500);\r\n      //     })\r\n      // }\r\n\r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        name: this.state.name,\r\n        type: this.state.type,\r\n        imgUrl: this.state.imgUrl,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n        axios.put(`http://localhost:3333/nonVegToppings/`+id, {\r\n          name: values.name,\r\n          type: values.type,\r\n          imgUrl: values.imgUrl,\r\n          price: values.price,\r\n    \r\n        })\r\n          .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/nonvegToppings\"}\r\n            }, 1500);\r\n          })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n        return(\r\n          <Container>\r\n        <h1 className=\"header\" >Update Toppings</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root} autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          name=\"name\"\r\n          variant=\"outlined\"\r\n          value={values.name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          name=\"type\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          value={values.type}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )} <br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          name=\"price\"\r\n          type=\"number\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Img-Url\"\r\n          label=\"Image Url\"\r\n          name=\"imgUrl\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.imgUrl}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n        <br />\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/nonVegToppings\" })}}\r\n         variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div> \r\n    </Container>\r\n     );\r\n    }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditToppings);","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\ViewCatalog.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Layout\\utils.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Layout\\TopNav.js",["286","287","288","289","290"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { Menu } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport './layoutdesign.css'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  }, \r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n\r\n  },\r\n  \r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  profileButton: {\r\n    marginRight: theme.spacing(2),\r\n    marginLeft:'auto',\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  \r\n  logo: {\r\n    maxWidth: 40,\r\n    marginRight: '10px'\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\n\r\nexport default function TopNav() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const opens = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n  const logout = () => {\r\n    {window.location.pathname = \"/\"}\r\n    localStorage.clear();\r\n    //window.location.reload(false)\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      \r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          \r\n          <img style={{width:'100%'}} className={classes.logo} src=\"https://image.shutterstock.com/image-vector/retro-vintage-pizza-logo-typography-600w-1379701046.jpg\" />\r\n          <Typography variant=\"h6\" noWrap style={{color:'white'}}>\r\n            <p> Pizza Bay </p>\r\n          </Typography>      \r\n          <div className={classes.profileButton} >\r\n              <IconButton  \r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle  />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={opens}\r\n                onClose={handleClose}\r\n              >\r\n              <MenuItem onClick={handleClose}> <Link to=\"/user/profile\" style={{ textDecoration: 'none'}}>\r\n             My Profile </Link> </MenuItem>\r\n              <MenuItem onClick={logout}> <a> Logout </a> </MenuItem>  \r\n              </Menu>\r\n            </div>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      \r\n    </div>\r\n  );\r\n  \r\n}","H:\\Ragu Htc\\project crud\\src\\components\\Layout\\Menu.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Layout\\menu.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\PizzaSides.js",["291","292","293"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\n\r\n\r\nfunction notifcation(){\r\n  store.addNotification({\r\n    title: \"Deleted\",\r\n    message: \"Data has been successfully Deleted\",\r\n    type: \"danger\",\r\n    insert: \"top\",\r\n    container: \"center\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n      onScreen: true\r\n    }\r\n  });\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n  });\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass PizzaSides extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          orgtableData: [],\r\n          offset: 0,\r\n          open: false,\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          search: \"\",\r\n          redirect: null \r\n      };\r\n      this.handlePageClick = this.handlePageClick.bind(this);\r\n    }\r\n    handlePageClick = (e) => {\r\n      const selectedPage = e.selected;\r\n      const offset = selectedPage * this.state.perPage;\r\n  \r\n      this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n      }, () => {\r\n          this.loadMoreData()\r\n      });\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true\r\n    })\r\n  };\r\n\r\n    handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    })\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.get()\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      \r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n  \r\n      get = () => {\r\n          axios.get('/pizzasides')\r\n          .then( result =>{\r\n               this.setState({ \r\n                records : result.data\r\n                });\r\n          });\r\n          }\r\n  \r\n      edit = (id) => {\r\n        this.setState({ redirect: \"/user/editsides/\"+id});\r\n      }\r\n  \r\n      delete = (id, e) => {\r\n          axios.delete(`http://localhost:3333/pizzasides/${id}`)\r\n        .then(res => {\r\n          const records = this.state.records.filter(item => item.id !== id);\r\n          this.setState({records,\r\n            open: false});\r\n          notifcation();\r\n        })\r\n      }\r\n      onSearch = e => {\r\n        this.setState({ search: e.target.value });\r\n      };\r\n\r\n    render() {\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n        this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Side's List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addsides\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Sides <AddIcon /> </Button> &nbsp; \r\n    <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Side's Name\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n    </Grid> \r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <b> Side's Name</b></StyledTableCell>\r\n            <StyledTableCell> <b>  Image </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Type </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\r\n            val.type.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) =>  (\r\n            <TableRow key={x.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\"> <p> {x.name} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n              <img style={{height:'90px', width:'90px'}} src = {x.imgUrl} />\r\n                </StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.price} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.type} </p></StyledTableCell>\r\n\r\n              <StyledTableCell align=\"left\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button>    &nbsp;\r\n              <div>\r\n        <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(PizzaSides);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\AddSides.js",["294","295"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport '../Styles/style.css'\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please Topping SIde name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please enter the type\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the image url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(200)\r\n          \r\n      });\r\n\r\nclass AddSides extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null        \r\n      };\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        type: \"\",\r\n        imgUrl: \"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit={\r\n        values =>{\r\n          axios.post('/pizzasides', {\r\n            name: values.name,\r\n            type: values.type,\r\n            imgUrl:values.imgUrl,\r\n            price: values.price,\r\n    \r\n        }).then( result =>{\r\n            console.log(result.data);\r\n            this.setState({ records: result.data});\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/pizzasides\"}\r\n            }, 1500);\r\n          } )\r\n        }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n          <Container>\r\n        <h1 className=\"header\" >Add SIdes</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">        \r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Toppings Name\"\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          variant=\"outlined\" \r\n          name=\"type\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n        />\r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )}\r\n         <br />\r\n\r\n        <TextField\r\n          id=\"Image-Url\"\r\n          label=\"Image Url\"\r\n          variant=\"outlined\" \r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          name=\"imgUrl\"\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}        />\r\n          {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}      \r\n          />\r\n          {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button  onClick={ () => { this.setState({ redirect: \"/user/pizzasides\" })}} variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>\r\n    </Container>\r\n    );\r\n  }}\r\n  </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(AddSides);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\Beverage.js",["296","297","298","299","300","301"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport {withStyles } from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\n\r\n\r\nfunction notifcation(){\r\n  store.addNotification({\r\n    title: \"Deleted\",\r\n    message: \"Data has been successfully Deleted\",\r\n    type: \"danger\",\r\n    insert: \"top\",\r\n    container: \"center\",\r\n    animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n    animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n      onScreen: true\r\n    }\r\n  });\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n  });\r\n\r\naxios.defaults.baseURL = 'http://localhost:3333';\r\nclass Beverage extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          record:  [],\r\n          orgtableData: [],\r\n          offset: 0,\r\n          open: false,\r\n          page: 0,\r\n          rowsPerPage:4,\r\n          search: \"\",\r\n          redirect: null\r\n      };\r\n    }\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true\r\n    })\r\n  };\r\n\r\n    handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    })\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.get()\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n      this.setState({\r\n        page: newPage\r\n      })\r\n    };\r\n  \r\n    handleChangeRowsPerPage = (event) => {\r\n      \r\n      this.setState({\r\n        page: 0,\r\n        rowsPerPage:(parseInt(event.target.value, 10))\r\n      })\r\n    };\r\n  \r\n      get = () => {\r\n          axios.get('/beverage')\r\n          .then( result =>{\r\n               this.setState({ \r\n                records : result.data\r\n                });\r\n          });\r\n          }\r\n  \r\n      edit = (id) => {\r\n        this.setState({ redirect: \"/user/editbeverage/\"+id});\r\n      }\r\n  \r\n      delete = (id, e) => {\r\n          axios.delete(`http://localhost:3333/beverage/${id}`)\r\n        .then(res => {\r\n          const records = this.state.records.filter(item => item.id !== id);\r\n          this.setState({records,\r\n            open: false});\r\n          notifcation();\r\n        })\r\n      }\r\n      \r\n      onSearch = e => {\r\n        this.setState({ search: e.target.value });\r\n      };\r\n\r\n    render() {\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n        this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Beverage List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={ () => { this.setState({ redirect: \"/user/addbeverage\" })}}\r\n    variant=\"contained\" color=\"primary\"> Add Beverage <AddIcon /> </Button> &nbsp; \r\n    {/* <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Beverage Name\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div> */}\r\n    </Grid> \r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}>     \r\n    <TableContainer component={Paper}>\r\n    <ReactNotification />\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"left\"> <b> Beverage Name</b></StyledTableCell>\r\n            <StyledTableCell> <b>  Beverage Image </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Price </b></StyledTableCell>\r\n            <StyledTableCell align=\"left\"> <b>Description </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records\r\n          .filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\r\n            val.type.toLowerCase().includes(this.state.search.toLowerCase()) ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) =>  (\r\n            <TableRow key={x.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\"> <p> {x.name} </p> </StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n              <img style={{height:'90px', width:'90px'}} src = {x.imgUrl} />\r\n                </StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.price} </p></StyledTableCell>\r\n              <StyledTableCell align=\"left\"> <p> {x.desc} </p> </StyledTableCell>\r\n\r\n              <StyledTableCell align=\"left\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <div style={{height:'5px'}}/>\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}> Delete \r\n              <DeleteIcon /> </Button>    &nbsp;\r\n              <div>\r\n        <Dialog\r\n        open={this.state.open}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.id, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.records.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Beverage);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\AddBeverage.js",["302","303"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Container, Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport '../Styles/style.css'\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '70ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       }\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Data has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please Topping Beverage name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          desc: yup\r\n          .string()\r\n          .required(\"Please enter the Description\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the image url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(120)\r\n          \r\n      });\r\n\r\nclass AddBeverage extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          desc:\"\",\r\n          price: \"\",\r\n          redirect: null        \r\n      };\r\n      }\r\n\r\n      \r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        desc: \"\",\r\n        imgUrl:\"\",\r\n        price: \"\"\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur\r\n      onSubmit={\r\n        values => {\r\n          axios.post('/beverage', {\r\n            name: values.name,\r\n            desc: values.desc,\r\n            imgUrl: values.imgUrl,\r\n            price: values.price,\r\n    \r\n        }).then( result =>{\r\n            console.log(result.data);\r\n            this.setState({ records: result.data});\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/beverage\"}\r\n            }, 1500);\r\n          } )\r\n        }\r\n      }\r\n      >\r\n      {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n      <Container>\r\n        <h1 className=\"header\" >Add Beverage</h1>\r\n\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <ReactNotification />\r\n        <form name=\"form\" onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">        \r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Toppings Name\"\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"Desc\"\r\n          label=\"Desc\"\r\n          variant=\"outlined\" \r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          name=\"desc\"\r\n        /> \r\n        {errors.desc && touched.desc && (\r\n                        <div className=\"input-feedback errors\">{errors.desc}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"Image-Url\"\r\n          label=\"Image Url\"\r\n          variant=\"outlined\" \r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          name=\"imgUrl\"\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onBlur={handleBlur} \r\n          onChange={handleChange}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n        />\r\n        {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> ADD  </Button> &nbsp;\r\n       <Button  onClick={ () => { this.setState({ redirect: \"/user/beverage\" })}} variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>\r\n    </Container>\r\n    );\r\n  }}\r\n  </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(AddBeverage);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\EditBeverage.js",["304"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid,Container, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Formik} from \"formik\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport '../Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '90ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter Beverage name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          desc: yup\r\n          .string()\r\n          .required(\"Please enter the description\"),\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the Image Url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\nclass EditBeverage extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          desc:\"\",\r\n          price: \"\",\r\n          redirect: null        \r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.get();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n      get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/beverage/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data);\r\n          this.setState({\r\n            data : result.data,\r\n            name:result.data.name,\r\n            imgUrl: result.data.imgUrl,\r\n            desc:result.data.desc,\r\n            price: result.data.price,\r\n        })\r\n        });\r\n      }\r\n\r\n      // update = () => {\r\n      //   const  id  = this.state.data.id;\r\n      //   axios.put(`http://localhost:3333/beverage/`+id, {\r\n      //       name: this.state.name,\r\n      //       desc: this.state.desc,\r\n      //       imgUrl: this.state.imgUrl,\r\n      //       price: this.state.price,\r\n    \r\n      //   })\r\n      //     .then(res => {\r\n      //       console.log(res);\r\n      //       console.log(res.data);\r\n      //       notifcation();\r\n      //       setInterval(() => {\r\n      //         {window.location.pathname = \"/user/beverage\"}\r\n      //       }, 1500);\r\n      //     })\r\n      // }\r\n\r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        name: this.state.name,\r\n        desc: this.state.desc,\r\n        imgUrl: this.state.imgUrl,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n        axios.put(`http://localhost:3333/beverage/`+id, {\r\n          name: values.name,\r\n          desc: values.desc,\r\n          imgUrl: values.imgUrl,\r\n          price: values.price,\r\n  \r\n    \r\n        })\r\n          .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n            notifcation();\r\n            setInterval(() => {\r\n              {window.location.pathname = \"/user/beverage\"}\r\n            }, 1500);\r\n          })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n        return(\r\n          <Container>\r\n        <h1 className=\"header\" >Update Beverage</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root} autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}      \r\n            />\r\n            {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"desc\"\r\n          name=\"desc\"\r\n          label=\"Desription\"\r\n          variant=\"outlined\"\r\n          value={values.desc}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}      \r\n          /> \r\n          {errors.desc && touched.desc && (\r\n                        <div className=\"input-feedback errors\">{errors.desc}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}        />\r\n          {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"Img-Url\"\r\n          label=\"Image Url\"\r\n          variant=\"outlined\"\r\n          name=\"imgUrl\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.imgUrl}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}        />\r\n          {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n        <br />\r\n      <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/beverage\" })}}\r\n       variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div> \r\n    </Container>\r\n     );\r\n    }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditBeverage);","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\EditSide.js",["305"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid,Container, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport '../Styles/style.css'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '90ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter side name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please enter the typr\"),\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter the Image Url\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n      });\r\n\r\nclass EditSide extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          records: [],\r\n          data:  [],\r\n          name:\"\",\r\n          imgUrl: \"\",\r\n          type:\"\",\r\n          price: \"\",\r\n          redirect: null        \r\n      };\r\n      }\r\n      componentDidMount() {\r\n        this.get();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n      get = () => {\r\n        let var1 = window.location.pathname;\r\n       let var2 = var1.split(\"\");\r\n       let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/pizzasides/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data);\r\n          this.setState({\r\n            data : result.data,\r\n            name:result.data.name,\r\n            imgUrl: result.data.imgUrl,\r\n            type:result.data.type,\r\n            price: result.data.price,\r\n        })\r\n        });\r\n      }\r\n\r\n      // update = () => {\r\n      //   const  id  = this.state.data.id;\r\n      //   axios.put(`http://localhost:3333/pizzasides/`+id, {\r\n      //       name: this.state.name,\r\n      //       type: this.state.type,\r\n      //       imgUrl: this.state.imgUrl,\r\n      //       price: this.state.price,\r\n    \r\n      //   })\r\n      //     .then(res => {\r\n      //       console.log(res);\r\n      //       console.log(res.data);\r\n      //       notifcation();\r\n      //       setInterval(() => {\r\n      //         {window.location.pathname = \"/user/pizzasides\"}\r\n      //       }, 1500);\r\n      //     })\r\n      // }\r\n\r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                <Formik\r\n             enableReinitialize\r\n      initialValues={{\r\n        name: this.state.name,\r\n        type: this.state.type,\r\n        imgUrl: this.state.imgUrl,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n          axios.put(`http://localhost:3333/pizzasides/`+id, {\r\n            name: values.name,\r\n            type: values.type,\r\n            imgUrl: values.imgUrl,\r\n            price: values.price,\r\n      \r\n          })\r\n            .then(res => {\r\n              console.log(res);\r\n              console.log(res.data);\r\n              notifcation();\r\n              setInterval(() => {\r\n                {window.location.pathname = \"/user/pizzasides\"}\r\n              }, 1500);\r\n            })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n        return(\r\n          <Container>\r\n        <h1 className=\"header\" >Update Sides</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root} autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          value={values.name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n        <TextField\r\n          id=\"Type\"\r\n          label=\"Type\"\r\n          variant=\"outlined\"\r\n          name=\"type\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.type}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )} <br />\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.price && touched.price && (\r\n            <div className=\"input-feedback errors\">{errors.price}</div>\r\n          )}\r\n\r\n        <TextField\r\n          id=\"Img-Url\"\r\n          label=\"Image Url\"\r\n          variant=\"outlined\"\r\n          name=\"imgUrl\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.imgUrl}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n        <br />\r\n      <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button onClick={ () => { this.setState({ redirect: \"/user/pizzasides\" })}}\r\n         variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div> \r\n    </Container>\r\n     );\r\n    }}\r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditSide);","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\EditUpload.js",["306","307"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {Grid, Container, Checkbox, FormControlLabel, withStyles } from '@material-ui/core';\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport './Styles/style.css'\r\nimport { Button } from '@material-ui/core';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '50ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Data has been successfully Updated\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const checkAlphabet = /^[aA-zZ\\s]+$/;\r\n      const schema = yup.object().shape({ \r\n        name: yup\r\n          .string()\r\n          .required(\"Please enter Pizza name\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n          \r\n          desc: yup\r\n          .string()\r\n          .required(\"Please enter desription\"),\r\n\r\n          imgUrl: yup\r\n          .string()\r\n          .required(\"Please enter imag Url\"),\r\n\r\n          category: yup\r\n          .string()\r\n          .required(\"Please enter category\")\r\n          .matches(checkAlphabet, 'Numbers not allowed' ),\r\n      \r\n          type: yup\r\n          .string()\r\n          .required(\"Please select type\"),\r\n          \r\n          price: yup\r\n          .number()\r\n          .required(\"Please enter the price\")\r\n          .positive('Enter positive numbers only')\r\n          .max(800)\r\n          \r\n      });\r\n\r\nclass EditUpload extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n            name:'',\r\n            desc:'',\r\n            price:'',\r\n            checkboxData : '',\r\n            category:'',\r\n            imgUrl:'',\r\n            size_datas: [],\r\n            records:[],\r\n            sizes:[],\r\n            redirect: null\r\n      };\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.get();\r\n        this.getSize();\r\n    }\r\n\r\n    sizeSelection(e){\r\n      let index\r\n      let sizeArray = [...this.state.sizes];\r\n  \r\n      if(e.target.checked === true){\r\n        sizeArray.push(e.target.value);\r\n       }else {\r\n        index = sizeArray.indexOf(+e.target.value)\r\n        sizeArray.splice(index, 1)\r\n       }\r\n       this.setState({\r\n        sizes: sizeArray\r\n       })\r\n    }\r\n\r\n    get = () => {\r\n        let var1 = window.location.pathname;\r\n        let var2 = var1.split(\"\");\r\n        let var3 = var2.pop();\r\n        axios.get('http://localhost:3333/Pizza/'+var3)\r\n        .then( result =>{\r\n          console.log(result.data.crustAvail);\r\n          // this.setState({ records: result.data});\r\n          this.setState({\r\n            data : result.data,\r\n            name: result.data.name,\r\n            desc: result.data.desc,\r\n            imgUrl: result.data.imgUrl,\r\n            price: result.data.price,\r\n            category: result.data.category,\r\n            checkboxData : result.data.sizes,\r\n            sizes : result.data.sizes\r\n        })\r\n        });\r\n      }\r\n\r\n      getSize = () => {\r\n        axios.get('/PizzaSize')\r\n        .then( result =>{\r\n          this.setState({\r\n            size_datas: result.data,            \r\n            });\r\n        });\r\n      }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n          return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n    <div>\r\n        <div style={{height:60}}  />\r\n        <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n        name: this.state.name,\r\n        desc: this.state.desc,\r\n        type: this.state.type,\r\n        imgUrl: this.state.imgUrl,\r\n        category: this.state.category,\r\n        price: this.state.price\r\n      }}\r\n      validationSchema={schema}\r\n      validateOnBlur \r\n      onSubmit = {\r\n        values => {\r\n          const  id  = this.state.data.id;\r\n          axios.put(`http://localhost:3333/Pizza/`+id, {\r\n              name: values.name,\r\n              desc: values.desc,\r\n              type: values.type,\r\n              imgUrl: values.imgUrl,\r\n              category: values.category,\r\n              price: values.price,\r\n              sizes: this.state.sizes\r\n      \r\n          })\r\n            .then(res => {\r\n              console.log(res);\r\n              console.log(res.data);\r\n              notifcation();\r\n              setInterval(() => {\r\n                {window.location.pathname = \"/user/viewcatalog\"}\r\n              }, 1500);\r\n            })\r\n        }\r\n      }>\r\n        {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n          <Container>\r\n            \r\n        <h1 className=\"header\" >Update Pizza</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form onSubmit={handleSubmit} className={classes.root}  autoComplete=\"off\">   \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          id=\"name\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          value={values.name}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        {errors.name && touched.name && (\r\n                        <div className=\"input-feedback errors\">{errors.name}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"desc\"\r\n          label=\"Description\"\r\n          variant=\"outlined\"\r\n          name=\"desc\"\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          value={values.desc}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        /> \r\n        {errors.desc && touched.desc && (\r\n                        <div className=\"input-feedback errors\">{errors.desc}</div>\r\n                      )}<br />\r\n\r\n        <TextField\r\n          id=\"Image-Url\"\r\n          label=\"Pizza Image Url\"\r\n          variant=\"outlined\" \r\n          name=\"imgUrl\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.imgUrl}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.imgUrl && touched.imgUrl && (\r\n                        <div className=\"input-feedback errors\">{errors.imgUrl}</div>\r\n                      )}\r\n\r\n        <TextField\r\n          id=\"category\"\r\n          name=\"category\"\r\n          label=\"category\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          value={values.category}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        {errors.category && touched.category && (\r\n                        <div className=\"input-feedback errors\">{errors.category}</div>\r\n                      )}\r\n        <br />\r\n\r\n      <TextField id=\"select\" label=\"Type\" value=\"20\" select \r\n      required\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n      value={values.type}\r\n      name=\"type\">\r\n      <MenuItem value=\"Veg\">Veg</MenuItem>\r\n      <MenuItem value=\"Non-Veg\">Non-Veg</MenuItem>\r\n      </TextField>\r\n      {errors.type && touched.type && (\r\n                        <div className=\"input-feedback errors\">{errors.type}</div>\r\n                      )}\r\n\r\n      <div style={{paddingLeft:'5px'}}> {errors.price && touched.price && (\r\n                        <div className=\"input-feedback errors\">{errors.price}</div>\r\n                  )} </div>\r\n\r\n        <TextField\r\n          id=\"price\"\r\n          label=\"Price\"\r\n          type=\"number\"\r\n          name=\"price\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          value={values.price}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n        />\r\n        <br />\r\n\r\n        <Grid>  \r\n       <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">Select Size of Pizza</FormLabel>\r\n        {this.state.size_datas.map((x) => (          \r\n          <FormControlLabel style={{paddingLeft:5}} key={x.id}\r\n          control = {\r\n          <Checkbox \r\n          value = {x.id}\r\n          defaultChecked = {this.state.checkboxData.includes(JSON.stringify(x.id)) ? true : false}\r\n          onChange={this.sizeSelection.bind(this)}\r\n          />\r\n          }\r\n          label={x.size }\r\n          />\r\n        ))}\r\n        </FormControl>\r\n        <hr />\r\n        </Grid>\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button type=\"submit\"  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button  onClick={ () => { this.setState({ redirect: \"/user/viewcatalog\" })}}\r\n        variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>  \r\n    </Container>\r\n     );\r\n    }}   \r\n    </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditUpload);","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\Topbar.js",["308","309","310","311","312","313","314"],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\Menu.js",[],["315","316"],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\Menus.js",["317","318","319","320","321","322","323","324","325","326","327"],"import React, { useState,  useRef  } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from 'axios';\r\nimport Link from '@material-ui/core/Link';\r\nimport { useEffect } from 'react';\r\nimport './MenuStyles/styles.css'\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport \"react-alice-carousel/lib/alice-carousel.css\";\r\nimport pizza1 from './Assets/pizza1.jpg'\r\nimport pizza2 from './Assets/pizza2.jpg'\r\nimport pizza3 from './Assets/pizza3.jpg'\r\nimport pizza4 from './Assets/pizza4.jpg'\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport CartControl from './cart-control/CartControl';\r\nimport { connect } from 'react-redux';\r\nimport SelectComponent from './SelectComponent/SelectComponent';\r\n\r\n// Dynamic copyright\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n// onClick scroll defined\r\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop) \r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    border: '2px solid #8B8989',\r\n    width: '100%',\r\n    height:'100%'\r\n    \r\n\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  Typography: {\r\n    fontFamily: `'Alegreya', serif`\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n  normalTextField: {\r\n    maxHeight : '6px',\r\n    maxWidth: '60px',\r\n    autoFocus: true\r\n },\r\n  image: {\r\n    width: '10px'\r\n  }\r\n}));\r\n\r\n\r\n function Menus(props) {\r\n  const classes = useStyles();\r\n  const [Records, setRecords] = useState([]);\r\n  const [Sides, setSides] = useState([]);\r\n  const [Beverages, setBeverages] = useState([]);\r\n  const [pizzaCart] = useState([]);\r\n  const [beverageCart] = useState([]);\r\n  const [sidesCart] = useState([]);\r\n  const sideRef = useRef(null);\r\n  const bevRef = useRef(null);\r\n  const [SizeArray, setSizeArray] = useState([]);\r\n  const [sizeName, setSizeName] = React.useState(null);\r\n  const [sizePrice, setSizePrice] = React.useState(null);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  // Scroll based on ref\r\n  const sideScroll = () => {\r\n  scrollToRef(sideRef);\r\n  // Move bit upwards\r\n  window.scrollBy(0, -100);\r\n  }\r\n\r\n  const beverageScroll = () => {\r\n    scrollToRef(bevRef);\r\n    // Move bit upwards\r\n    window.scrollBy(0, -100);\r\n    }\r\n\r\n  // push pizza data on click\r\n  const getPizza = (id, e) => {\r\n    axios.get(`http://localhost:3333/Pizza/${id}`)\r\n    .then( rel =>{\r\n      pizzaCart.push(rel.data)\r\n\r\n      props.onIncrementPizza(id, pizzaCart)\r\n    });\r\n  } \r\n\r\n// Delete Pizza \r\n  const deletePizza = (id, e) => {\r\n    pizzaCart.splice(pizzaCart.findIndex(function(i){\r\n        return i.id === id;\r\n    }), 1);\r\n      props.onDecrementPizza(id, pizzaCart)  \r\n  }\r\n\r\n// push beverage data on click\r\n  const getBeverage = (id, e) => {\r\n    axios.get(`http://localhost:3333/beverage/${id}`)\r\n    .then( res =>{\r\n      beverageCart.push(res.data)\r\n      console.log(\"new cart array in beverage\" + JSON.stringify(beverageCart))\r\n\r\n      props.onIncreasingBeve(id, beverageCart)\r\n    });\r\n  }\r\n\r\n  // Delete Beverage\r\n  const deleteBeverage = (id, e) => {\r\n    beverageCart.splice(beverageCart.findIndex(function(i){\r\n      return i.id === id;\r\n  }), 1);\r\n      //console.log(\"new cart array after removing Beverage\" + JSON.stringify(beverageCart));\r\n      props.onDecreasingBeve(id, beverageCart)\r\n  }\r\n\r\n\r\n// push sides data on click\r\n  const getSides = (id, e) => {\r\n    axios.get(`http://localhost:3333/pizzasides/${id}`)\r\n    .then( resp =>{\r\n      sidesCart.push(resp.data)\r\n      // console.log(\"new cart array\" + JSON.stringify(CartArray))\r\n      props.onIncrementCart(id, sidesCart); \r\n    });    \r\n  }\r\n\r\n  // Delete Sides\r\n  const deleteSides = (id, e) => {\r\n    sidesCart.splice(sidesCart.findIndex(function(i){\r\n      return i.id === id;\r\n  }), 1);\r\n      // console.log(\"new cart array after removing\" + JSON.stringify(CartArray));\r\n      props.onDecrementCart(id, sidesCart)\r\n  }\r\n\r\n  //   Pizza\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3333/Pizza')\r\n      .then(res => {\r\n        setRecords(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }, []);\r\n\r\n  // Sides\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3333/pizzasides')\r\n      .then(result => {\r\n        setSides(result.data)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }, []);\r\n\r\n  //   Beverage\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3333/beverage')\r\n      .then(response => {\r\n        setBeverages(response.data)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }, []);\r\n\r\n// Pizza sizes\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3333/PizzaSize')\r\n      .then(res => {\r\n        setSizeArray(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })      \r\n  },\r\n   []);\r\n\r\n   const onGettingSizeValue = (name, price) => { \r\n    setSizeName(name)\r\n    setSizePrice(price);\r\n  };\r\n\r\n  // const selectSizes = (num) => {\r\n  //   num.map((val, i) => {\r\n  //     axios.get(`http://localhost:3333/PizzaSize/${val}`)\r\n  //    .then( res =>{\r\n  //     SizeArray.push(res.data)         \r\n  //     //  SizeArray.push(JSON.stringify(res.data.size));       \r\n  //    })\r\n  //   }, [])\r\n  //   console.log(\"Inside fuction \" + JSON.stringify(SizeArray))\r\n  // }\r\n\r\n  return (\r\n    <React.Fragment >\r\n      <CssBaseline />\r\n      <div className=\"scroll-bg\" >\r\n        <div style={{ height: '100px' }} />\r\n\r\n        {/* Image carousel */}\r\n        <AliceCarousel\r\n          autoPlayInterval={2000}\r\n          autoPlayDirection=\"rtl\"\r\n          autoPlay={true}\r\n          fadeOutAnimation={true}\r\n          disableButtonsControls = {true}\r\n          disableAutoPlayOnAction={true}\r\n          infinite={true}\r\n        >\r\n          {/* Image with descripion */}\r\n          <div >\r\n          <img src={pizza1} className=\"sliderimg\" alt=\"pizza1\" />\r\n          <center> <h4> ENJOY BEST PIZZA NO WHERE ELSE </h4>  </center>\r\n          </div>\r\n          <div>\r\n          <img src={pizza2} className=\"sliderimg\" alt=\"pizza2\" />\r\n          <center> <h4> FRESHLY MADE PIZZAS SERVED HOT </h4>  </center>\r\n          </div>\r\n          <div>\r\n          <img src={pizza3} className=\"sliderimg\" alt=\"pizza3\" />\r\n          <center> <h4> NO WORRIES ON HEALTH,WE PROVIDE ONLY HYGENIC FOODS  </h4>  </center>\r\n          </div>\r\n          <div>\r\n          <img src={pizza4} className=\"sliderimg\" alt=\"pizza4\" />\r\n          <center> <h4> ALL COVID PRECAUTIONS ARE FOLLOWED </h4>  </center>\r\n          </div>\r\n        </AliceCarousel>\r\n      </div>\r\n\r\n      <div className=\"bg\">\r\n      {/* For Pizza display */}\r\n      <div >\r\n        <center> <div className=\"smooth-scroll-button\">\r\n         <Button onClick={sideScroll} variant=\"contained\">Sides</Button> &nbsp;\r\n         <Button onClick={beverageScroll} variant=\"contained\">Beverages</Button>\r\n         {/* <Button onClick={print} variant=\"contained\">Print</Button> */}\r\n        </div> </center>\r\n        <Container maxWidth=\"md\" className=\"pizza\" >\r\n          <h2 className=\"heading\"> <span> Pizzas </span> </h2>\r\n          <Grid container spacing={4}>\r\n            {Records.map((record, id) => (\r\n              <Grid item key={id} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    component = \"img\"\r\n                    className={classes.cardMedia}\r\n                    image={record.imgUrl}\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Grid style={{ height: '45px' }}>\r\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {record.name}\r\n                        <img style={{ height: '20px', width: '20px', marginTop: '6px', float: 'right' }} src={record.type == 'Veg' ? \"https://www.pngkey.com/png/detail/261-2619381_chitr-veg-symbol-svg-veg-and-non-veg.png\" :\r\n                          \"https://tpng.net/download/800x800_245-2459071_veg-biryani-png.png\"\r\n                        } />\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid style={{ height: '85px' }}>\r\n                      <Typography>\r\n                        {record.desc}\r\n                      &nbsp;\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid>\r\n                      <Typography>\r\n                        {console.log(\"size name \" + sizeName)}\r\n                        <SelectComponent getSizePrice={setSizePrice} getSizeName={setSizeName} size={record.sizes} id={record.id} />\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Typography style={{color:'green', fontWeight:'bold'}}>  ₹\r\n                  {parseFloat(record.price).toFixed(2)} &nbsp; &nbsp;                    \r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      onClick={null}\r\n                      disabled={false}                      \r\n                      //disabled = {props.arr.indexOf(props.ids)!==-1 }                      onClick={props.clicked}\r\n                      startIcon={<AddShoppingCartIcon />}\r\n                    >\r\n                      Customize\r\n                    </Button>\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                  \r\n                    <br />\r\n                  <CartControl label=\"ADD\" disableVal ={props.pizzaResult.includes(record.id) ? true : false}\r\n                    clicked={() => getPizza(record.id)} colour=\"primary\" />  \r\n\r\n                    <CartControl label=\"REMOVE\" disableVal ={props.pizzaResult.includes(record.id) ? false : true}\r\n                    clicked={() => deletePizza(record.id)} colour=\"secondary\" />\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n\r\n      {/* For Sides */}\r\n      <div>\r\n        <div id=\"sides\" ref={sideRef} style={{ height: '14px' }} />\r\n        <Container maxWidth=\"md\" >\r\n          <h2 className=\"heading\" > <span> Sides </span> </h2>\r\n          <Grid container spacing={4}>\r\n            {Sides.map((side, id) => (\r\n             <Grid item key={side.id} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    component= \"img\"\r\n                    className={classes.cardMedia}\r\n                    image={side.imgUrl}\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Grid style={{ height: '45px' }}>\r\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {side.name}\r\n                        <img style={{ height: '20px', width: '20px', marginTop: '6px', float: 'right' }} src={side.type == 'Veg' ? \"https://www.pngkey.com/png/detail/261-2619381_chitr-veg-symbol-svg-veg-and-non-veg.png\" :\r\n                          \"https://tpng.net/download/800x800_245-2459071_veg-biryani-png.png\"\r\n                        } />\r\n                    &nbsp;\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Typography style={{color:'green', fontWeight:'bold'}}> ₹\r\n                    {parseFloat(side.price).toFixed(2)}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                  \r\n                    <CartControl label=\"ADD\" disableVal ={props.prodResult.includes(side.id) ? true : false}\r\n                    clicked={() => {getSides(side.id);}} colour=\"primary\" />  \r\n\r\n                    <CartControl label=\"REMOVE\" disableVal ={props.prodResult.includes(side.id) ? false : true}\r\n                    clicked={() => {deleteSides(side.id); }}colour=\"secondary\" /> \r\n\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n\r\n      {/* For Beverages */}\r\n      <div >\r\n        <div id=\"beverage\" ref={bevRef} style={{ height: '14px' }} />\r\n        <Container maxWidth=\"md\" >\r\n          <h2 className=\"heading\"> <span> Beverages </span> </h2>\r\n          <Grid container spacing={4}>\r\n            {Beverages.map((beverage, id) => (\r\n              <Grid item key={id} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    component= \"img\"\r\n                    className={classes.cardMedia}\r\n                    image={beverage.imgUrl}\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Grid style={{ height: '45px' }}>\r\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {beverage.name}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid style={{ height: '60px' }}>\r\n                      <Typography>\r\n                        {beverage.desc}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Typography style={{color:'green', fontWeight:'bold'}}>\r\n                        ₹ {parseFloat(beverage.price).toFixed(2)}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions >\r\n                  <CartControl label=\"ADD\" disableVal ={props.beverageResult.includes(beverage.id) ? true : false}\r\n                    clicked={() => {getBeverage(beverage.id)} } colour=\"primary\" />  \r\n\r\n                    <CartControl label=\"REMOVE\" disableVal ={props.beverageResult.includes(beverage.id) ? false : true}\r\n                    clicked={() =>deleteBeverage(beverage.id)} colour=\"secondary\" />\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div style={{height:'5px'}} />\r\n      <footer className={classes.footer}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Thank You!\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n          Order a delicious pizza on the go, anywhere, anytime. Pizza Hut is happy to assist you with your home delivery.\r\n          Every time you order, you get a hot and fresh pizza delivered at your doorstep in less than thirty minutes. *T&C Apply.\r\n          Hurry up and place your order now!\r\n        </Typography>\r\n        <Copyright />\r\n      </footer>\r\n\r\n      {/* End footer */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      crt: state.cart,\r\n      prodResult: state.prodId,\r\n      pizzaResult: state.pizzaId,\r\n      beverageResult: state.beverageId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n// Sides\r\n      onIncrementCart: (id, arrayValue) => dispatch({type: 'ADD', value:id, payload:arrayValue}),\r\n      onDecrementCart: (id, arrayValue) => dispatch({type: 'REMOVE', value:id, payload:arrayValue }),\r\n// Pizza\r\n      onIncrementPizza: (id, arrayValue) => dispatch({type: 'INCREMENT', value:id, payload:arrayValue}),\r\n      onDecrementPizza: (id, arrayValue) => dispatch({type: 'DECREMENT', value:id, payload:arrayValue}),\r\n// Beverage\r\n      onIncreasingBeve: (id, arrayValue) => dispatch({type: 'INCREASE', value:id, payload:arrayValue}),\r\n      onDecreasingBeve: (id, arrayValue) => dispatch({type: 'DECREASE', value:id, payload:arrayValue}),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menus);\r\n","H:\\Ragu Htc\\project crud\\src\\components\\Sign-Up\\SignUp.js",["328","329"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction notifcation(){\r\n    store.addNotification({\r\n      title: \"Created\",\r\n      message: \"Account has been successfully created, Try logging in\",\r\n      type: \"success\",\r\n      insert: \"top\",\r\n      container: \"center\",\r\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n      dismiss: {\r\n        duration: 5000,\r\n        onScreen: true\r\n      }\r\n    });\r\n  }\r\n\r\n  const schema = yup.object().shape({ \r\n    username: yup\r\n      .string()\r\n      .required(\"Please enter Username\"),\r\n  \r\n      email: yup\r\n      .string()\r\n      .email()\r\n      .required(\"Please enter Email\"),\r\n      \r\n      phone: yup\r\n      .string()\r\n      .required(\"Please enter Phone number\"),\r\n    \r\n      password: yup\r\n      .string()\r\n      .required(\"Please enter password\"),\r\n\r\n  });\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [redirect, setRedirect] = useState(null);\r\n\r\n  if (redirect) {\r\n    return <Redirect to={redirect} />\r\n  }\r\n  return (\r\n    \r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n\r\n      <Formik\r\n    initialValues={{\r\n      username: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      password:\"\"\r\n    }}\r\n    validationSchema={schema}\r\n    validateOnBlur\r\n    onSubmit={\r\n      values => {\r\n      axios.post('http://localhost:8080/users', {\r\n        username: values.username,\r\n        email: values.email,\r\n        phone: values.phone,\r\n        password: values.password\r\n\r\n    }).then( result =>{\r\n        console.log(result.data);\r\n        notifcation();\r\n        setInterval(() => {\r\n          {window.location.pathname = \"/\"}\r\n        }, 1500);\r\n      } ).catch(err => {\r\n        if(err.response.status){\r\n        setErrorMessage(\"Username or Email already exist\")\r\n        }\r\n      })\r\n    }\r\n    }\r\n    >\r\n    \r\n    {(props) => {\r\n        const{\r\n          touched,\r\n          errors,\r\n          handleSubmit,\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n      \r\n        return(\r\n\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <ReactNotification />\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                required\r\n                name=\"username\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                id=\"username\"\r\n                label=\"Username\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {errors.username && touched.username && (\r\n                        <div className=\"input-feedback errors \">{errors.username}</div>\r\n                      )}\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"phone\"\r\n                label=\"Phone\"\r\n                name=\"phone\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {errors.phone && touched.phone && (\r\n                        <div className=\"input-feedback errors \">{errors.phone}</div>\r\n                      )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {errors.email && touched.email && (\r\n                        <div className=\"input-feedback errors \">{errors.email}</div>\r\n                      )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {errors.password && touched.password && (\r\n                        <div className=\"input-feedback errors \">{errors.password}</div>\r\n                      )}\r\n              <p style={{color:'red'}}> {errorMessage} </p>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link  onClick={() => { setRedirect(\"/\")}}  variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      );\r\n    }}\r\n    </Formik>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Manage-Pizza-Routing\\Manage-Pizza-Routing.js",["330"],"import React, { Component , Fragment} from 'react';\r\nimport { BrowserRouter as Router, Route,  Redirect} from 'react-router-dom';\r\nimport AddSize from '../AddSize';\r\nimport AddCrust from '../AddCrust';\r\nimport AddVegToppings from '../AddVegToppings';\r\nimport AddNonVegToppings from '../AddNonVegToppings';\r\n\r\nimport EditCrust from '../EditCrust';\r\nimport EditSize from '../EditSize';\r\nimport EditNonVegToppings from '../EditNonVegToppings';\r\nimport EditVegToppings from '../EditVegToppings';\r\n\r\nimport PizzaSize from '../PizzaSize';\r\nimport PizzaCrust from '../PizzaCrust';\r\nimport VegToppings from '../VegToppings';\r\nimport NonVegToppings from '../NonVegToppings';\r\n\r\n\r\nclass ManagePizzaRouting extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                <Fragment>\r\n                    <Route path=\"/user/addsize/\" component = {AddSize} /> \r\n                    <Route path=\"/user/addcrust/\" component = {AddCrust} />\r\n                    <Route path=\"/user/addvegtoppings/\" component = {AddVegToppings} />\r\n                    <Route path=\"/user/addnonvegtoppings/\" component = {AddNonVegToppings} />\r\n\r\n                    <Route path=\"/user/editcrust/\" component = {EditCrust} />\r\n                    <Route path=\"/user/editsize/\" component = {EditSize} />\r\n                    <Route path=\"/user/editnonvegtoppings/\" component = {EditNonVegToppings} />\r\n                    <Route path=\"/user/editvegtoppings/\" component = {EditVegToppings} />\r\n\r\n                    <Route path=\"/user/pizzasize/\" component = {PizzaSize} />\r\n                    <Route path=\"/user/pizzacrust/\" component = {PizzaCrust} />\r\n                    <Route path=\"/user/vegToppings/\" component = {VegToppings} /> \r\n                    <Route path=\"/user/nonvegToppings/\" component = {NonVegToppings} />\r\n                </Fragment>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManagePizzaRouting;","H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\Beverages\\Bevarages-Roting\\Beverages-Routing.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\ManagePizza\\PizzaSides\\Pizza-Sides-Routing\\Pizza-Sides-Routing.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\Menu-Routing\\Menu-Routing.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Employee-Routing\\Employee-Routing.js",["331"],"import React, { Component , Fragment} from 'react';\r\nimport { BrowserRouter as Router, Route,  Redirect} from 'react-router-dom';\r\nimport ViewEmployee from '../View-Employee';\r\nimport AddEmployee from '../Add-Employee';\r\nimport EditEmployee from '../Edit-Employee';\r\n\r\n\r\nclass EmployeeRouting extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                <Fragment>\r\n                <Route path=\"/user/employee\" component = {ViewEmployee} />\r\n                <Route path=\"/user/addemployee\" component = {AddEmployee} />\r\n                <Route path=\"/user/editemployee/:id\" component = {EditEmployee} />\r\n                </Fragment>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployeeRouting;","H:\\Ragu Htc\\project crud\\src\\components\\UploadPizza\\Upload-Pizza-Routing\\Upload-Pizza-Routing.js",["332"],"import React, { Component , Fragment} from 'react';\r\nimport { BrowserRouter as Router, Route,  Redirect} from 'react-router-dom';\r\nimport EditUpload from '../EditUpload';\r\nimport UploadPizza from '../UploadPizza';\r\nimport ViewCatalog from '../ViewCatalog';\r\n\r\nclass UploadPizzaRouting extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                <Fragment>\r\n                    <Route path=\"/user/editpizza/:id\" component = {EditUpload} />\r\n                    <Route path=\"/user/upload/\" component = {UploadPizza} />\r\n                    <Route path=\"/user/viewcatalog/\" component = {ViewCatalog} />\r\n                </Fragment>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UploadPizzaRouting;","H:\\Ragu Htc\\project crud\\src\\components\\MyProfile\\My-Profile-Routing\\My-Profile-Routing.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\ForgotPassword\\Password-Reset-Routing\\Password-Reset-Routing.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Add-Employee.js",["333","334"],"import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles  } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from 'axios';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport { Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '50ch',\r\n          },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Inserted\",\r\n          message: \"Employee has been successfully added\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\n\r\n      const schema = yup.object().shape({ \r\n        username: yup\r\n          .string()\r\n          .required(\"Please enter Username\"),\r\n      \r\n          email: yup\r\n          .string()\r\n          .email()\r\n          .required(\"Please enter Email\"),\r\n          \r\n          phone: yup\r\n          .string()\r\n          .required(\"Please enter Phone number\"),\r\n        \r\n          password: yup\r\n          .string()\r\n          .required(\"Please enter password\"),\r\n    \r\n      });\r\n\r\nclass AddEmployee extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      records: [],\r\n      errorMessage: ''    \r\n  };\r\n  }\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n    \r\n          <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n      \r\n            <Formik\r\n          initialValues={{\r\n            username: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            password:\"\"\r\n          }}\r\n          validationSchema={schema}\r\n          validateOnBlur\r\n          onSubmit={\r\n            values => {\r\n            axios.post('http://localhost:8080/users', {\r\n              username: values.username,\r\n              email: values.email,\r\n              phone: values.phone,\r\n              password: values.password\r\n      \r\n          }).then( result =>{\r\n              console.log(result.status);\r\n              notifcation();\r\n              setInterval(() => {\r\n                {window.location.pathname = \"/user/employee\"}\r\n              }, 1500);\r\n            }).catch(err => {\r\n              if(err.response.status){\r\n                this.setState({\r\n                  errorMessage:\"Username or Email already exist\"\r\n                })\r\n              }\r\n            })\r\n          }\r\n          }\r\n          >\r\n          \r\n          {(props) => {\r\n              const{\r\n                touched,\r\n                errors,\r\n                handleSubmit,\r\n                values,\r\n                handleChange,\r\n                handleBlur,\r\n              } = props;\r\n            \r\n              return(\r\n      \r\n            <div className={classes.paper}>\r\n              <div style={{height:'130px'}} />\r\n              <ReactNotification />\r\n              <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"username\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Username\"\r\n                      autoFocus\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    {errors.username && touched.username && (\r\n                              <div className=\"input-feedback errors \">{errors.username}</div>\r\n                            )}\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"phone\"\r\n                      label=\"Phone\"\r\n                      name=\"phone\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    {errors.phone && touched.phone && (\r\n                              <div className=\"input-feedback errors \">{errors.phone}</div>\r\n                            )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                              <div className=\"input-feedback errors \">{errors.email}</div>\r\n                            )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                              <div className=\"input-feedback errors \">{errors.password}</div>\r\n                            )}\r\n                  <p style={{color:'red'}}>{this.state.errorMessage}</p>  \r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  ADD\r\n                </Button>\r\n              </form>\r\n            </div>\r\n            );\r\n          }}\r\n          </Formik>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AddEmployee);","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\Edit-Employee.js",["335","336"],"import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid, withStyles } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport './styles/view-styles.css';\r\nimport axios from 'axios';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport 'animate.css/animate.min.css';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport * as yup from \"yup\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '50ch',\r\n          },\r\n          '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        },\r\n        normalTextField: {\r\n          maxHeight : '4px'\r\n       },\r\n      });\r\n\r\n      const schema = yup.object().shape({ \r\n        emp_id: yup\r\n          .string()\r\n          .required(\"Please enter your Employee ID\"),\r\n    \r\n        emp_name: yup\r\n        .string()\r\n        .required(\"Please enter your Employee name\"),\r\n\r\n        emp_dept: yup\r\n        .string()\r\n        .required(\"Please enter your Employee sdewpartment\"),\r\n\r\n        emp_age: yup\r\n        .string()\r\n        .required(\"Please enter your Agew\"),\r\n\r\n        emp_phone: yup\r\n        .string()\r\n        .required(\"Please enter your Phonwe\"),\r\n        \r\n      });      \r\n\r\n      function notifcation(){\r\n        store.addNotification({\r\n          title: \"Edited\",\r\n          message: \"Employee has been successfully Edited\",\r\n          type: \"success\",\r\n          insert: \"top\",\r\n          container: \"center\",\r\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n          dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n          }\r\n        });\r\n      }\r\nclass EditEmployee extends Component  {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      name : \"React\",\r\n      records: [],\r\n      employee:  [],\r\n      empId:\"\",\r\n      empName: \"\",\r\n      empAge: \"\",\r\n      phoneNum:\"\",\r\n      department: \"\",\r\n  };\r\n  }\r\n\r\n  OnchangeID = (e) => {\r\n    this.setState({\r\n      empId : e.target.value\r\n    });\r\n  }\r\n\r\n  OnchangeEmpName = (e) => {\r\n    this.setState({\r\n      empName: e.target.value\r\n    });\r\n  }\r\n\r\n  OnchangePhone = (e) => {\r\n    this.setState({\r\n      phoneNum: e.target.value\r\n    });\r\n  }\r\n\r\n  OnchangeDept = (e) => {\r\n    this.setState({\r\n      department: e.target.value\r\n    });\r\n  }\r\n\r\n  OnchangeAge = (e) => {\r\n    this.setState({\r\n      empAge: e.target.value\r\n    });\r\n  }\r\n  \r\n  update = () => {\r\n    const id = this.props.match.params.id;\r\n    axios.put(`http://localhost:3333/employees/`+id, {\r\n      emp_id: this.state.empId,\r\n      name: this.state.empName,\r\n      department: this.state.department,\r\n      phone: this.state.phoneNum,\r\n      age: this.state.empAge\r\n\r\n    })\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n        notifcation();\r\n        setInterval(() => {\r\n          {window.location.pathname = \"/user/employee\"}\r\n        }, 1500);\r\n      })\r\n  }\r\n\r\n    render() {\r\n      const id1 = this.props.match.params.id;\r\n        const { classes } = this.props;\r\n        return (\r\n        <div>\r\n        <div style={{height:60}}  />\r\n        <h1 className=\"header\" >Update Employee</h1>\r\n        <div style={{paddingLeft:'270px'}}> \r\n        <form className={classes.root} noValidate autoComplete=\"off\">    \r\n        <ReactNotification />\r\n        <TextField\r\n          required\r\n          disabled\r\n          id=\"id\"\r\n          label=\"ID\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          variant=\"outlined\"\r\n          value={id1}\r\n        />\r\n\r\n      <TextField\r\n          required\r\n          id=\"empid\"\r\n          label=\"Emp.ID\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange={this.OnchangeID}\r\n          name = \"emp_id\"\r\n        /> <br />\r\n\r\n        <TextField\r\n          id=\"name\"\r\n          label=\"Emp Name\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange = {this.OnchangeEmpName}\r\n          name = \"emp_name\"\r\n        />\r\n\r\n        <TextField\r\n          id=\"phone\"\r\n          label=\"Phone Number\"\r\n          type=\"number\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          onChange = {this.OnchangePhone}\r\n          name = \"emp_phone\"\r\n        /> <br />\r\n\r\n        <TextField\r\n          id=\"dept\"\r\n          label=\"Department\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange = {this.OnchangeDept}\r\n          name = \"emp_dept\"\r\n        /> \r\n\r\n        <TextField\r\n          id=\"age\"\r\n          label=\"Age\"\r\n          variant=\"outlined\"\r\n          InputProps={{ classes: { input: this.props.classes.normalTextField } }}\r\n          onChange = {this.OnchangeAge}\r\n          name = \"emp_age\"\r\n        /> \r\n        <br />\r\n        <Grid style={{paddingLeft:'10px'}} >\r\n       <Button onClick={this.update}  variant=\"contained\" color=\"primary\"> UPDATE  </Button> &nbsp;\r\n       <Button  onClick={() => {window.location.pathname = \"/user/employee\"}} variant=\"contained\" color=\"secondary\"> CANCEL  </Button>\r\n       </Grid>\r\n    </form>\r\n    </div>\r\n </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(EditEmployee);","H:\\Ragu Htc\\project crud\\src\\components\\Employee\\View-Employee.js",["337","338"],"import React, { Component } from 'react';\r\nimport { Grid, withStyles } from '@material-ui/core';\r\nimport './styles/view-styles.css';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport StyledTableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport { Button ,TableRow} from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport axios from 'axios';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport {store} from \"react-notifications-component\";\r\nimport 'animate.css/animate.min.css';\r\nimport 'react-notifications-component/dist/theme.css'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport './add-employee-style.css';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n          backgroundColor: theme.palette.action.hover,\r\n            },\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '22ch',\r\n              },\r\n        },\r\n    table: {\r\n        minWidth: 700,\r\n      },\r\n      head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n      },\r\n      body: {\r\n        fontSize: 14,\r\n      },\r\n  });\r\n\r\n  function notifcation(){\r\n    store.addNotification({\r\n      title: \"Deleted\",\r\n      message: \"Employee has been successfully Deleted\",\r\n      type: \"danger\",\r\n      insert: \"top\",\r\n      container: \"center\",\r\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n      dismiss: {\r\n        duration: 5000,\r\n        onScreen: true\r\n      }\r\n    });\r\n  }\r\n  \r\n  axios.defaults.baseURL = 'http://localhost:3333';\r\nclass ViewEmployee extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      records: [],\r\n      record:  [],\r\n      orgtableData: [],\r\n      open: false,\r\n      page: 0,\r\n      rowsPerPage:4,\r\n      currentPage: 1,\r\n      search: \"\" \r\n  };\r\n  }\r\n  \r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true\r\n    })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    })\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({\r\n      page: newPage\r\n    })\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({\r\n      page: 0,\r\n      rowsPerPage:(parseInt(event.target.value, 10))\r\n    })\r\n  };\r\n  \r\n  componentDidMount() {\r\n    this.get()\r\n}\r\n\r\n  delete = (id, e) => {\r\n    const val = JSON.parse(window.localStorage.getItem('login'));\r\n    axios.delete(`http://localhost:8080/users/${id}`,{\r\n      headers:{\r\n        \"Authorization\": val.token\r\n      }})\r\n      .then(res => {\r\n        const records = this.state.records.filter(item => item.userId !== id);\r\n        this.setState({records,\r\n        open: false\r\n        });\r\n        notifcation();\r\n      })\r\n  }\r\n\r\n  edit(id){\r\n    window.location.pathname = (\"/user/editemployee/\"+id);\r\n  }\r\n\r\n  get = () => {\r\n    const val = JSON.parse(window.localStorage.getItem('login'));\r\n    axios.get('http://localhost:8080/users', {\r\n      headers:{\r\n        \"Authorization\": val.token\r\n      }\r\n    })\r\n    .then( result =>{\r\n      console.log(result.data)      \r\n      this.setState({ records: result.data,\r\n        orgtableData : result.data,\r\n      })\r\n    });\r\n  }\r\n\r\n  onSearch = e => {\r\n    this.setState({ search: e.target.value });\r\n  };\r\n  \r\n    render() {\r\n        const { classes } = this.props;\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage, \r\n          this.state.records.length - this.state.page * this.state.rowsPerPage);\r\n        return (\r\n            <div>\r\n                <div style={{height:60}}  />\r\n                    <h1 className=\"header\" >Employee List</h1>\r\n\r\n    <Grid style={{paddingLeft:'270px'}}>\r\n    <Button onClick={() => {window.location.pathname = \"/user/addemployee\"}} \r\n    variant=\"contained\" color=\"primary\"> Add Employee <AddIcon /> </Button> &nbsp; \r\n\r\n  <div className=\"searchBox\" style={{float:'right'}}>\r\n  <TextField\r\n        className={classes.margin}\r\n        id=\"input-with-icon-textfield\"\r\n        label=\"Search by Emp Name or ID\"\r\n        onChange={this.onSearch}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n  </div>\r\n    </Grid> \r\n\r\n    <div style={{height:8}}  /> \r\n    <div style={{paddingLeft:'270px'}}> \r\n    <ReactNotification />\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"center\"> <b> Employee ID </b></StyledTableCell>\r\n            <StyledTableCell> <b> Employee Name </b></StyledTableCell>\r\n            <StyledTableCell align=\"center\"> <b>Email </b></StyledTableCell>\r\n            <StyledTableCell align=\"right\"> <center> <b>Actions  </b> </center></StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.records.filter((val) => {\r\n            if(this.search == \"\"){\r\n              return val;\r\n            }else if(val.username.toLowerCase().includes(this.state.search.toLowerCase()) || \r\n            val.userId.toLowerCase().includes(this.state.search.toLowerCase())  ){\r\n              return val;\r\n            }\r\n          })\r\n          .slice(this.state.page * this.state.rowsPerPage, this.state.page * \r\n            this.state.rowsPerPage + this.state.rowsPerPage)\r\n          .map((x) => (\r\n            <TableRow key={x.userId}>\r\n              <StyledTableCell className=\"fonts\" align=\"right\"> <p>{x.userId} </p></StyledTableCell>\r\n              <StyledTableCell component=\"th\" scope=\"row\"> <p> {x.username} </p></StyledTableCell>\r\n              <StyledTableCell align=\"right\"> <p> {x.email} </p> </StyledTableCell>\r\n\r\n              <StyledTableCell align=\"right\">\r\n              <Button variant=\"contained\" onClick={() => this.edit(x.id)} \r\n              color=\"primary\"> Update <EditIcon /> </Button> &nbsp;\r\n              <Button variant=\"contained\"  color=\"secondary\" onClick={this.handleClickOpen}>\r\n               Delete <DeleteIcon /> </Button>\r\n\r\n               <div>\r\n              <Dialog\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n              >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will permanentely Delete this record from the database\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(e) => this.delete(x.userId, e)} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n              </div>\r\n              </StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n          {\r\n          emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <div >\r\n    <TablePagination\r\n      component=\"div\"\r\n      rowsPerPageOptions={[4, 8, 12]}\r\n      count={this.state.orgtableData.length}\r\n      page={this.state.page}\r\n      onChangePage={this.handleChangePage}\r\n      rowsPerPage={this.state.rowsPerPage}\r\n      onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n    />\r\n    </div>\r\n    </div>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ViewEmployee);","H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\cart-control\\CartControl.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\store\\reducer.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\car-output\\CartOutput.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\CreateCard.js",["339","340","341","342","343","344","345","346","347"],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Home\\GroupedButton.js",[],"H:\\Ragu Htc\\project crud\\src\\components\\Customer\\Menus\\SelectComponent\\SelectComponent.js",["348","349","350"],"import React, {useState} from \"react\";\r\nimport { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\n    const SelectComponent = (props) => {\r\n        const classes = useStyles();\r\n        const [SizeArray, setSizeArray] = useState([]);\r\n        const [size, setSize] = useState('');\r\n        const [sizePrice, setSizePrice] = useState('');\r\n\r\n        const handleSizeChange = (e) => {\r\n            setSize(e.target.value);\r\n            setSizePrice(e.target.value2)\r\n            \r\n            props.getSizePrice(e.target.value2)\r\n            props.getSizeName(e.target.value)\r\n            // props.setSizeValue(e.target.value, e.target.value2)\r\n        }\r\n\r\n        useEffect(() => {\r\n                props.size.map((val, y) => {\r\n                    axios.get(`http://localhost:3333/PizzaSize/${val}`)\r\n                  .then(res => {\r\n                    const tempArray = SizeArray;\r\n                    tempArray.push(res.data);\r\n                    setSizeArray([...tempArray]);\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                  })\r\n                })                              \r\n          },\r\n           []);\r\n\r\n    return (\r\n        <div>\r\n\r\n    <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-autowidth-label\">Size</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-autowidth-label\"\r\n          id=\"demo-simple-select-autowidth\"\r\n          value={size}\r\n          defaultValue=\"Regular\"\r\n          className={classes.selectEmpty}\r\n          onChange={handleSizeChange }\r\n          autoWidth\r\n        >\r\n            {\r\n                SizeArray.map((x, i) => {                   \r\n                    return  <MenuItem key={i} value2={x.price} value={x.size}>{x.size}</MenuItem> \r\n                })\r\n            }\r\n          \r\n        </Select>\r\n        <FormHelperText>By default Regular is selected</FormHelperText>\r\n      </FormControl>\r\n\r\n        </div>\r\n    );\r\n  }\r\n\r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n        setSizeValue: (name, price) => dispatch( {sizeName: name, sizePrice:price})      \r\n    };\r\n  };\r\n\r\nexport default connect(null, mapDispatchToProps) (SelectComponent);\r\n",{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","severity":1,"message":"356","line":9,"column":10,"nodeType":"357","messageId":"358","endLine":9,"endColumn":18},{"ruleId":"355","severity":1,"message":"359","line":37,"column":7,"nodeType":"357","messageId":"358","endLine":37,"endColumn":14},{"ruleId":"360","severity":1,"message":"361","line":42,"column":36,"nodeType":"362","messageId":"363","endLine":42,"endColumn":38},{"ruleId":"360","severity":1,"message":"361","line":69,"column":27,"nodeType":"362","messageId":"363","endLine":69,"endColumn":29},{"ruleId":"360","severity":1,"message":"361","line":71,"column":34,"nodeType":"362","messageId":"363","endLine":71,"endColumn":36},{"ruleId":"360","severity":1,"message":"361","line":41,"column":60,"nodeType":"362","messageId":"363","endLine":41,"endColumn":62},{"ruleId":"360","severity":1,"message":"361","line":47,"column":61,"nodeType":"362","messageId":"363","endLine":47,"endColumn":63},{"ruleId":"364","severity":1,"message":"365","line":89,"column":96,"nodeType":"366","endLine":89,"endColumn":111},{"ruleId":"367","severity":1,"message":"368","line":163,"column":14,"nodeType":"369","messageId":"370","endLine":175,"endColumn":17},{"ruleId":"371","severity":1,"message":"372","line":231,"column":25,"nodeType":"373","messageId":"374","endLine":231,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":232,"column":28,"nodeType":"362","messageId":"363","endLine":232,"endColumn":30},{"ruleId":"360","severity":1,"message":"361","line":93,"column":27,"nodeType":"362","messageId":"363","endLine":93,"endColumn":29},{"ruleId":"367","severity":1,"message":"368","line":183,"column":17,"nodeType":"369","messageId":"370","endLine":183,"endColumn":63},{"ruleId":"360","severity":1,"message":"361","line":97,"column":25,"nodeType":"362","messageId":"363","endLine":97,"endColumn":27},{"ruleId":"367","severity":1,"message":"368","line":137,"column":13,"nodeType":"369","messageId":"370","endLine":137,"endColumn":59},{"ruleId":"355","severity":1,"message":"375","line":148,"column":11,"nodeType":"357","messageId":"358","endLine":148,"endColumn":17},{"ruleId":"371","severity":1,"message":"372","line":182,"column":25,"nodeType":"373","messageId":"374","endLine":182,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":183,"column":28,"nodeType":"362","messageId":"363","endLine":183,"endColumn":30},{"ruleId":"367","severity":1,"message":"368","line":130,"column":15,"nodeType":"369","messageId":"370","endLine":130,"endColumn":62},{"ruleId":"367","severity":1,"message":"368","line":106,"column":13,"nodeType":"369","messageId":"370","endLine":106,"endColumn":60},{"ruleId":"367","severity":1,"message":"368","line":138,"column":19,"nodeType":"369","messageId":"370","endLine":138,"endColumn":67},{"ruleId":"367","severity":1,"message":"368","line":111,"column":15,"nodeType":"369","messageId":"370","endLine":111,"endColumn":63},{"ruleId":"355","severity":1,"message":"375","line":122,"column":11,"nodeType":"357","messageId":"358","endLine":122,"endColumn":17},{"ruleId":"364","severity":1,"message":"365","line":185,"column":11,"nodeType":"366","endLine":185,"endColumn":23},{"ruleId":"355","severity":1,"message":"376","line":19,"column":8,"nodeType":"357","messageId":"358","endLine":19,"endColumn":21},{"ruleId":"371","severity":1,"message":"372","line":202,"column":25,"nodeType":"373","messageId":"374","endLine":202,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":203,"column":28,"nodeType":"362","messageId":"363","endLine":203,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":216,"column":15,"nodeType":"379","endLine":216,"endColumn":39},{"ruleId":"355","severity":1,"message":"376","line":19,"column":8,"nodeType":"357","messageId":"358","endLine":19,"endColumn":21},{"ruleId":"371","severity":1,"message":"372","line":201,"column":25,"nodeType":"373","messageId":"374","endLine":201,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":202,"column":28,"nodeType":"362","messageId":"363","endLine":202,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":215,"column":15,"nodeType":"379","endLine":215,"endColumn":39},{"ruleId":"367","severity":1,"message":"368","line":110,"column":15,"nodeType":"369","messageId":"370","endLine":110,"endColumn":66},{"ruleId":"355","severity":1,"message":"375","line":121,"column":11,"nodeType":"357","messageId":"358","endLine":121,"endColumn":17},{"ruleId":"364","severity":1,"message":"365","line":175,"column":11,"nodeType":"366","endLine":175,"endColumn":30},{"ruleId":"367","severity":1,"message":"368","line":159,"column":15,"nodeType":"369","messageId":"370","endLine":159,"endColumn":66},{"ruleId":"355","severity":1,"message":"380","line":63,"column":9,"nodeType":"357","messageId":"358","endLine":63,"endColumn":14},{"ruleId":"355","severity":1,"message":"381","line":65,"column":16,"nodeType":"357","messageId":"358","endLine":65,"endColumn":23},{"ruleId":"367","severity":1,"message":"368","line":78,"column":5,"nodeType":"369","messageId":"370","endLine":78,"endColumn":37},{"ruleId":"377","severity":1,"message":"378","line":95,"column":11,"nodeType":"379","endLine":95,"endColumn":172},{"ruleId":"382","severity":1,"message":"383","line":126,"column":43,"nodeType":"379","endLine":126,"endColumn":46},{"ruleId":"371","severity":1,"message":"372","line":191,"column":25,"nodeType":"373","messageId":"374","endLine":191,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":192,"column":28,"nodeType":"362","messageId":"363","endLine":192,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":205,"column":15,"nodeType":"379","endLine":205,"endColumn":77},{"ruleId":"367","severity":1,"message":"368","line":109,"column":15,"nodeType":"369","messageId":"370","endLine":109,"endColumn":62},{"ruleId":"355","severity":1,"message":"375","line":120,"column":11,"nodeType":"357","messageId":"358","endLine":120,"endColumn":17},{"ruleId":"355","severity":1,"message":"384","line":18,"column":8,"nodeType":"357","messageId":"358","endLine":18,"endColumn":17},{"ruleId":"355","severity":1,"message":"385","line":19,"column":8,"nodeType":"357","messageId":"358","endLine":19,"endColumn":18},{"ruleId":"355","severity":1,"message":"386","line":20,"column":8,"nodeType":"357","messageId":"358","endLine":20,"endColumn":22},{"ruleId":"371","severity":1,"message":"372","line":181,"column":25,"nodeType":"373","messageId":"374","endLine":181,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":182,"column":28,"nodeType":"362","messageId":"363","endLine":182,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":195,"column":15,"nodeType":"379","endLine":195,"endColumn":77},{"ruleId":"367","severity":1,"message":"368","line":110,"column":15,"nodeType":"369","messageId":"370","endLine":110,"endColumn":60},{"ruleId":"355","severity":1,"message":"375","line":121,"column":11,"nodeType":"357","messageId":"358","endLine":121,"endColumn":17},{"ruleId":"367","severity":1,"message":"368","line":158,"column":15,"nodeType":"369","messageId":"370","endLine":158,"endColumn":60},{"ruleId":"367","severity":1,"message":"368","line":157,"column":17,"nodeType":"369","messageId":"370","endLine":157,"endColumn":64},{"ruleId":"367","severity":1,"message":"368","line":190,"column":17,"nodeType":"369","messageId":"370","endLine":190,"endColumn":65},{"ruleId":"364","severity":1,"message":"365","line":286,"column":7,"nodeType":"366","endLine":286,"endColumn":26},{"ruleId":"355","severity":1,"message":"387","line":29,"column":7,"nodeType":"357","messageId":"358","endLine":29,"endColumn":22},{"ruleId":"355","severity":1,"message":"380","line":95,"column":9,"nodeType":"357","messageId":"358","endLine":95,"endColumn":14},{"ruleId":"355","severity":1,"message":"381","line":97,"column":16,"nodeType":"357","messageId":"358","endLine":97,"endColumn":23},{"ruleId":"388","severity":1,"message":"389","line":127,"column":6,"nodeType":"390","endLine":127,"endColumn":8,"suggestions":"391"},{"ruleId":"377","severity":1,"message":"378","line":141,"column":11,"nodeType":"379","endLine":141,"endColumn":172},{"ruleId":"382","severity":1,"message":"383","line":176,"column":48,"nodeType":"379","endLine":176,"endColumn":51},{"ruleId":"382","severity":1,"message":"383","line":177,"column":43,"nodeType":"379","endLine":177,"endColumn":46},{"ruleId":"351","replacedBy":"392"},{"ruleId":"353","replacedBy":"393"},{"ruleId":"355","severity":1,"message":"394","line":17,"column":8,"nodeType":"357","messageId":"358","endLine":17,"endColumn":14},{"ruleId":"355","severity":1,"message":"395","line":18,"column":8,"nodeType":"357","messageId":"358","endLine":18,"endColumn":16},{"ruleId":"355","severity":1,"message":"396","line":106,"column":10,"nodeType":"357","messageId":"358","endLine":106,"endColumn":19},{"ruleId":"355","severity":1,"message":"397","line":108,"column":10,"nodeType":"357","messageId":"358","endLine":108,"endColumn":19},{"ruleId":"355","severity":1,"message":"398","line":109,"column":10,"nodeType":"357","messageId":"358","endLine":109,"endColumn":14},{"ruleId":"355","severity":1,"message":"381","line":109,"column":16,"nodeType":"357","messageId":"358","endLine":109,"endColumn":23},{"ruleId":"355","severity":1,"message":"399","line":227,"column":10,"nodeType":"357","messageId":"358","endLine":227,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":302,"column":25,"nodeType":"379","endLine":304,"endColumn":29},{"ruleId":"360","severity":1,"message":"361","line":302,"column":123,"nodeType":"362","messageId":"363","endLine":302,"endColumn":125},{"ruleId":"377","severity":1,"message":"378","line":372,"column":25,"nodeType":"379","endLine":374,"endColumn":29},{"ruleId":"360","severity":1,"message":"361","line":372,"column":121,"nodeType":"362","messageId":"363","endLine":372,"endColumn":123},{"ruleId":"367","severity":1,"message":"368","line":126,"column":11,"nodeType":"369","messageId":"370","endLine":126,"endColumn":43},{"ruleId":"355","severity":1,"message":"375","line":142,"column":11,"nodeType":"357","messageId":"358","endLine":142,"endColumn":17},{"ruleId":"355","severity":1,"message":"356","line":2,"column":43,"nodeType":"357","messageId":"358","endLine":2,"endColumn":51},{"ruleId":"355","severity":1,"message":"356","line":2,"column":43,"nodeType":"357","messageId":"358","endLine":2,"endColumn":51},{"ruleId":"355","severity":1,"message":"356","line":2,"column":43,"nodeType":"357","messageId":"358","endLine":2,"endColumn":51},{"ruleId":"367","severity":1,"message":"368","line":99,"column":17,"nodeType":"369","messageId":"370","endLine":99,"endColumn":62},{"ruleId":"355","severity":1,"message":"375","line":117,"column":17,"nodeType":"357","messageId":"358","endLine":117,"endColumn":23},{"ruleId":"355","severity":1,"message":"400","line":32,"column":13,"nodeType":"357","messageId":"358","endLine":32,"endColumn":19},{"ruleId":"367","severity":1,"message":"368","line":130,"column":11,"nodeType":"369","messageId":"370","endLine":130,"endColumn":56},{"ruleId":"371","severity":1,"message":"372","line":197,"column":44,"nodeType":"373","messageId":"374","endLine":197,"endColumn":46},{"ruleId":"360","severity":1,"message":"361","line":198,"column":28,"nodeType":"362","messageId":"363","endLine":198,"endColumn":30},{"ruleId":"355","severity":1,"message":"401","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":25},{"ruleId":"355","severity":1,"message":"402","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":18},{"ruleId":"355","severity":1,"message":"403","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":13},{"ruleId":"355","severity":1,"message":"404","line":10,"column":10,"nodeType":"357","messageId":"358","endLine":10,"endColumn":19},{"ruleId":"355","severity":1,"message":"405","line":12,"column":8,"nodeType":"357","messageId":"358","endLine":12,"endColumn":18},{"ruleId":"355","severity":1,"message":"395","line":13,"column":8,"nodeType":"357","messageId":"358","endLine":13,"endColumn":16},{"ruleId":"355","severity":1,"message":"406","line":14,"column":8,"nodeType":"357","messageId":"358","endLine":14,"endColumn":22},{"ruleId":"355","severity":1,"message":"407","line":15,"column":8,"nodeType":"357","messageId":"358","endLine":15,"endColumn":19},{"ruleId":"355","severity":1,"message":"394","line":16,"column":8,"nodeType":"357","messageId":"358","endLine":16,"endColumn":14},{"ruleId":"355","severity":1,"message":"397","line":27,"column":16,"nodeType":"357","messageId":"358","endLine":27,"endColumn":25},{"ruleId":"371","severity":1,"message":"408","line":39,"column":41,"nodeType":"373","messageId":"409","endLine":39,"endColumn":43},{"ruleId":"388","severity":1,"message":"410","line":51,"column":12,"nodeType":"390","endLine":51,"endColumn":14,"suggestions":"411"},"no-native-reassign",["412"],"no-negated-in-lhs",["413"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'values' is assigned a value but never used.","'ReactPaginate' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'theme' is assigned a value but never used.","'setOpen' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'TextField' is defined but never used.","'SearchIcon' is defined but never used.","'InputAdornment' is defined but never used.","'StyledTableCell' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countArray'. Either include it or remove the dependency array.","ArrayExpression",["414"],["412"],["413"],"'Select' is defined but never used.","'MenuItem' is defined but never used.","'SizeArray' is assigned a value but never used.","'sizePrice' is assigned a value but never used.","'open' is assigned a value but never used.","'onGettingSizeValue' is assigned a value but never used.","'schema' is assigned a value but never used.","'useState' is defined but never used.","'ButtonBase' is defined but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'FormControl' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'SizeArray' and 'props.size'. Either include them or remove the dependency array.",["415"],"no-global-assign","no-unsafe-negation",{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},"Update the dependencies array to be: [countArray]",{"range":"420","text":"421"},"Update the dependencies array to be: [SizeArray, props.size]",{"range":"422","text":"423"},[3457,3459],"[countArray]",[1762,1764],"[SizeArray, props.size]"]